<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xungerrrr&#39;s Site</title>
  
  <subtitle>Every Little Counts.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xungerrrr.github.io/"/>
  <updated>2019-03-03T13:36:26.577Z</updated>
  <id>http://xungerrrr.github.io/</id>
  
  <author>
    <name>Xunyan Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件的本质与软件工程科学</title>
    <link href="http://xungerrrr.github.io/2019/03/03/%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8%E4%B8%8E%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%A7%91%E5%AD%A6/"/>
    <id>http://xungerrrr.github.io/2019/03/03/软件的本质与软件工程科学/</id>
    <published>2019-03-03T05:04:15.000Z</published>
    <updated>2019-03-03T13:36:26.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件工程的定义"><a href="#软件工程的定义" class="headerlink" title="软件工程的定义"></a>软件工程的定义</h2><blockquote><p>Software engineering is “(1) the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software, that is, the application of engineering to software,” and “(2) the study of approaches as in (1).” – IEEE Standard 610.12</p></blockquote><p>软件工程是，系统化、规范化、可度量化的方法在软件开发、运行和维护中的应用，即工程化方法在软件中的引用，以及对这些方法的研究。</p><h2 id="解释导致software-crisis本质原因、表现，述说克服软件危机的方法"><a href="#解释导致software-crisis本质原因、表现，述说克服软件危机的方法" class="headerlink" title="解释导致software crisis本质原因、表现，述说克服软件危机的方法"></a>解释导致software crisis本质原因、表现，述说克服软件危机的方法</h2><p>导致软件危机的本质原因是计算机硬件的发展。根据软件构造性成本模型COCOMO（Constructive Cost Model），软件的成本与代码行的数量成指数关系。计算机的能力越强大，软件编程越复杂，软件成本呈指数爆炸式增长，导致了软件危机的出现。</p><p>克服软件危机的方法有：构建软件工程知识体系（SWEBoK）、对企业的能力成熟度进行评估、制定软件工程管理标准、使用实践管理工具总结实践经验等等。</p><h2 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h2><p>在软件工程中，软件生命周期是指将软件开发工作在时间维度上分割成不同部分，来提高设计、产品管理和项目管理水平的过程，也称为软件开发过程，其各个阶段实现了软件的需求定义与分析、设计、实现、测试、交付和维护。常见的过程模型有瀑布模型、螺旋模型、敏捷的模型等等。</p><h2 id="SWEBoK的15个知识域"><a href="#SWEBoK的15个知识域" class="headerlink" title="SWEBoK的15个知识域"></a>SWEBoK的15个知识域</h2><ul><li>Knowledge Areas Characterizing the Practice of Software Engineering（实践知识域）<ul><li>Software Requirements（软件需求）：为解决真实问题，软件产品所需的要求和约束。</li><li>Software Design（软件设计）：软件设计包含了需求分析、架构设计、成分设计、接口设计等设计过程以及设计的结果。</li><li>Software Construction（软件构建）：软件的具体开发工作。</li><li>Software Testing（软件测试）：测试的基础、技术、人机交互接口测试、测试手段和现状分析等。</li><li>Software Maintenance（软件维护）：提升性能、更新软件和错误修正。</li><li>Software Configuration Management（软件配置管理）</li><li>Software Engineering Management（软件工程管理）</li><li>Software Engineering Process（软件工程过程）</li><li>Software Engineering Models and Methods（软件工程模型和方法）</li><li>Software Quality（软件质量）</li><li>Software Engineering Professional Practice（软件工程专业训练）</li></ul></li><li>Knowledge Areas Characterizing the Educational Requirements of Software Engineering（教育需求知识域）<ul><li>Software Engineering Economics（软件工程经济学）：商业决策与技术决策的统一。</li><li>Computing Foundations（计算基础）：计算机科学的基础知识。</li><li>Mathematical Foundations（数学基础）：数学基础知识。</li><li>Engineering Foundations（工程基础）：工程化技术的知识。</li></ul></li></ul><h2 id="简单解释CMMI的五个级别。"><a href="#简单解释CMMI的五个级别。" class="headerlink" title="简单解释CMMI的五个级别。"></a>简单解释CMMI的五个级别。</h2><ul><li>Level 1 – Initial：无序，自发生产模式。</li><li>Level 2 – Managed：有活力，项目级管理模式。</li><li>Level 3 – Defined：受控，企业级组织</li><li>Level 4 – Quantitatively Managed：量化，数据化管理模式</li><li>Level 5 – Optimizing：优化</li></ul><h2 id="用自己语言简述SWEBok或CMMI（约-200-字）"><a href="#用自己语言简述SWEBok或CMMI（约-200-字）" class="headerlink" title="用自己语言简述SWEBok或CMMI（约 200 字）"></a>用自己语言简述SWEBok或CMMI（约 200 字）</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件工程的定义&quot;&gt;&lt;a href=&quot;#软件工程的定义&quot; class=&quot;headerlink&quot; title=&quot;软件工程的定义&quot;&gt;&lt;/a&gt;软件工程的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Software engineering is “(1) the appl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Unity 3D - 人机坦克大战</title>
    <link href="http://xungerrrr.github.io/2018/06/19/Unity-3D-%E4%BA%BA%E6%9C%BA%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/"/>
    <id>http://xungerrrr.github.io/2018/06/19/Unity-3D-人机坦克大战/</id>
    <published>2018-06-19T15:22:32.000Z</published>
    <updated>2018-06-20T01:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="游戏要求"><a href="#游戏要求" class="headerlink" title="游戏要求"></a>游戏要求</h2><ul><li>使用 “感知 - 思考 - 行为” 模型，建模 AI 坦克</li><li>场景中要放置一些障碍阻挡对手视线</li><li>坦克需要放置一个矩阵包围盒触发器，以保证 AI 坦克能使用射线探测对手方位</li><li>AI 坦克必须在有目标条件下使用导航，并能绕过障碍。（失去目标时策略自己思考）</li><li>实现人机对战</li></ul><h2 id="游戏实现"><a href="#游戏实现" class="headerlink" title="游戏实现"></a>游戏实现</h2><p>未完待续……</p><h2 id="游戏视频"><a href="#游戏视频" class="headerlink" title="游戏视频"></a>游戏视频</h2><p><a href="http://www.iqiyi.com/w_19ryzvaf0t.html" target="_blank" rel="noopener">http://www.iqiyi.com/w_19ryzvaf0t.html</a></p><h2 id="游戏项目"><a href="#游戏项目" class="headerlink" title="游戏项目"></a>游戏项目</h2><p><a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/Homework-9" target="_blank" rel="noopener">传送门</a></p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p>[1] <a href="http://www.chenxd59.cn/?p=213" target="_blank" rel="noopener">Unity3D Note8——使用 NavMesh 实现坦克大战游戏</a></p><p><em><a href="/2018/03/30/Unity-3D-Learning/" title="返回 Unity 3D Learning">返回 Unity 3D Learning</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;游戏要求&quot;&gt;&lt;a href=&quot;#游戏要求&quot; class=&quot;headerlink&quot; title=&quot;游戏要求&quot;&gt;&lt;/a&gt;游戏要求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 “感知 - 思考 - 行为” 模型，建模 AI 坦克&lt;/li&gt;
&lt;li&gt;场景中要放置一些障碍阻挡对手视线&lt;
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D - 汽车尾气模拟</title>
    <link href="http://xungerrrr.github.io/2018/05/29/Unity-3D-%E6%B1%BD%E8%BD%A6%E5%B0%BE%E6%B0%94%E6%A8%A1%E6%8B%9F/"/>
    <id>http://xungerrrr.github.io/2018/05/29/Unity-3D-汽车尾气模拟/</id>
    <published>2018-05-29T15:06:53.000Z</published>
    <updated>2018-06-19T15:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="粒子系统设计"><a href="#粒子系统设计" class="headerlink" title="粒子系统设计"></a>粒子系统设计</h1><p>新建粒子系统，设定粒子材料为 ParticleSmokeBlack ，并修改参数如下：</p><h2 id="修改-Shape-的-形状和半径参数"><a href="#修改-Shape-的-形状和半径参数" class="headerlink" title="修改 Shape 的 形状和半径参数"></a>修改 Shape 的 形状和半径参数</h2><img src="/2018/05/29/Unity-3D-汽车尾气模拟/Shape.png" title="Shape"><h2 id="修改粒子模块基本参数如下"><a href="#修改粒子模块基本参数如下" class="headerlink" title="修改粒子模块基本参数如下"></a>修改粒子模块基本参数如下</h2><img src="/2018/05/29/Unity-3D-汽车尾气模拟/Module.png" title="Module"><h2 id="修改-Size-over-Lifetime-曲线如下，使尾气烟雾逐渐扩散出去"><a href="#修改-Size-over-Lifetime-曲线如下，使尾气烟雾逐渐扩散出去" class="headerlink" title="修改 Size over Lifetime 曲线如下，使尾气烟雾逐渐扩散出去"></a>修改 Size over Lifetime 曲线如下，使尾气烟雾逐渐扩散出去</h2><img src="/2018/05/29/Unity-3D-汽车尾气模拟/Size.png" title="Size"><h2 id="在-CarCollide-类中，根据碰撞速度，调整车辆的损坏程度。"><a href="#在-CarCollide-类中，根据碰撞速度，调整车辆的损坏程度。" class="headerlink" title="在 CarCollide 类中，根据碰撞速度，调整车辆的损坏程度。"></a>在 CarCollide 类中，根据碰撞速度，调整车辆的损坏程度。</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CarCollide</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> damage = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision collision</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 速度越大，损坏越大</span></span><br><span class="line">        damage += <span class="keyword">this</span>.gameObject.GetComponent&lt;Rigidbody&gt;().velocity.magnitude;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在-SmokeController-类中控制尾气随引擎负荷、车辆损坏程度的变化"><a href="#在-SmokeController-类中控制尾气随引擎负荷、车辆损坏程度的变化" class="headerlink" title="在 SmokeController 类中控制尾气随引擎负荷、车辆损坏程度的变化"></a>在 SmokeController 类中控制尾气随引擎负荷、车辆损坏程度的变化</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityStandardAssets.Vehicles.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SmokeController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> engineRevs;            <span class="comment">// 引擎负荷</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> exhaustRate;           <span class="comment">// 尾气变化率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> damage;                <span class="comment">// 车辆损坏情况</span></span><br><span class="line">    <span class="keyword">public</span> GameObject car;              <span class="comment">// 车辆</span></span><br><span class="line">    <span class="keyword">public</span> CarController carController; <span class="comment">// 车辆控制器</span></span><br><span class="line">    <span class="keyword">public</span> CarCollide carCollide;       <span class="comment">// 车辆碰撞检测</span></span><br><span class="line"></span><br><span class="line">    ParticleSystem exhaust;             <span class="comment">// 尾气粒子系统</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        exhaust = GetComponent&lt;ParticleSystem&gt;();</span><br><span class="line">        car = <span class="keyword">this</span>.transform.parent.parent.gameObject;</span><br><span class="line">        carController = car.GetComponent&lt;CarController&gt;();</span><br><span class="line">        carCollide = car.GetComponent&lt;CarCollide&gt;();</span><br><span class="line">        exhaustRate = <span class="number">5000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        engineRevs = carController.Revs;</span><br><span class="line">        damage = carCollide.damage;</span><br><span class="line">        <span class="comment">// 动态修改 emissionRate。引擎负荷越大，粒子产生率越大。</span></span><br><span class="line">        exhaust.emissionRate = Mathf.Pow(engineRevs, <span class="number">5</span>) * exhaustRate + <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> col = exhaust.colorOverLifetime;</span><br><span class="line">        Gradient grad = <span class="keyword">new</span> Gradient();</span><br><span class="line">        <span class="comment">// 根据车辆损坏程度修改尾气深浅。损坏越大，颜色越深。</span></span><br><span class="line">        grad.SetKeys(<span class="keyword">new</span> GradientColorKey[] &#123; <span class="keyword">new</span> GradientColorKey(Color.white, <span class="number">0.0</span>f), <span class="keyword">new</span> GradientColorKey(<span class="keyword">new</span> Color(<span class="number">214</span>, <span class="number">189</span>, <span class="number">151</span>), <span class="number">0.079</span>f), <span class="keyword">new</span> GradientColorKey(Color.white, <span class="number">1.0</span>f)&#125;,</span><br><span class="line">            <span class="keyword">new</span> GradientAlphaKey[] &#123; <span class="keyword">new</span> GradientAlphaKey(<span class="number">0.0</span>f, <span class="number">0.0</span>f), <span class="keyword">new</span> GradientAlphaKey(damage / <span class="number">255</span>f + <span class="number">10</span>f / <span class="number">255</span>f, <span class="number">0.061</span>f), <span class="keyword">new</span> GradientAlphaKey(<span class="number">0.0</span>f, <span class="number">1.0</span>f) &#125;);</span><br><span class="line">        col.color = grad;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><p>初始尾气效果<br><img src="/2018/05/29/Unity-3D-汽车尾气模拟/Initial.png" title="Initial"></p><p>多次碰撞后静止效果<br><img src="/2018/05/29/Unity-3D-汽车尾气模拟/Damage2.png" title="Damage2"></p><p>多次碰撞后运行效果<br><img src="/2018/05/29/Unity-3D-汽车尾气模拟/Damage.png" title="Damage"></p><h1 id="视频地址"><a href="#视频地址" class="headerlink" title="视频地址"></a>视频地址</h1><p><a href="http://v.youku.com/v_show/id_XMzYzMzg0MDgzNg==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="noopener">http://v.youku.com/v_show/id_XMzYzMzg0MDgzNg==.html?spm=a2h3j.8428770.3416059.1</a></p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/Homework-7" target="_blank" rel="noopener">GitHub</a>.</p><p><em><a href="/2018/03/30/Unity-3D-Learning/" title="返回 Unity 3D Learning">返回 Unity 3D Learning</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;粒子系统设计&quot;&gt;&lt;a href=&quot;#粒子系统设计&quot; class=&quot;headerlink&quot; title=&quot;粒子系统设计&quot;&gt;&lt;/a&gt;粒子系统设计&lt;/h1&gt;&lt;p&gt;新建粒子系统，设定粒子材料为 ParticleSmokeBlack ，并修改参数如下：&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D - 智能巡逻兵</title>
    <link href="http://xungerrrr.github.io/2018/05/11/Unity-3D-%E6%99%BA%E8%83%BD%E5%B7%A1%E9%80%BB%E5%85%B5/"/>
    <id>http://xungerrrr.github.io/2018/05/11/Unity-3D-智能巡逻兵/</id>
    <published>2018-05-11T09:34:38.000Z</published>
    <updated>2018-05-29T15:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="游戏要求"><a href="#游戏要求" class="headerlink" title="游戏要求"></a>游戏要求</h1><ul><li><p>游戏设计要求： </p><ul><li>创建一个地图和若干巡逻兵(使用动画)；</li><li>每个巡逻兵走一个3~5个边的凸多边型，位置数据是相对地址。即每次确定下一个目标位置，用自己当前位置为原点计算；</li><li>巡逻兵碰撞到障碍物，则会自动选下一个点为目标；</li><li>巡逻兵在设定范围内感知到玩家，会自动追击玩家；</li><li>失去玩家目标后，继续巡逻；</li><li>计分：玩家每次甩掉一个巡逻兵计一分，与巡逻兵碰撞游戏结束；</li></ul></li><li><p>程序设计要求： </p><ul><li>必须使用订阅与发布模式传消息 </li><li>工厂模式生产巡逻兵</li></ul></li></ul><h1 id="游戏操作方法"><a href="#游戏操作方法" class="headerlink" title="游戏操作方法"></a>游戏操作方法</h1><p>使用方向键或 WASD 键操控玩家，躲避巡逻兵追捕。玩家每次甩掉一个巡逻兵计一分，与巡逻兵碰撞则游戏结束，在倒计时结束后仍未死亡则游戏获胜。</p><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><h2 id="订阅与发布模式"><a href="#订阅与发布模式" class="headerlink" title="订阅与发布模式"></a>订阅与发布模式</h2><p>添加类 GameEventManager，并在其中定义游戏事件的处理逻辑。这是订阅及发布事件的入口。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameEventManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 玩家逃脱事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">EscapeEvent</span>(<span class="params">GameObject patrol</span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">event</span> EscapeEvent OnGoalLost;</span><br><span class="line">    <span class="comment">// 巡逻兵追击事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">FollowEvent</span>(<span class="params">GameObject patrol</span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">event</span> FollowEvent OnFollowing;</span><br><span class="line">    <span class="comment">// 游戏失败事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">GameOverEvent</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">event</span> GameOverEvent GameOver;</span><br><span class="line">    <span class="comment">// 游戏胜利事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">WinEvent</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">event</span> WinEvent Win;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 玩家逃脱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerEscape</span>(<span class="params">GameObject patrol</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (OnGoalLost != <span class="literal">null</span>) &#123;</span><br><span class="line">            OnGoalLost(patrol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 巡逻兵追击</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FollowPlayer</span>(<span class="params">GameObject patrol</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (OnFollowing != <span class="literal">null</span>) &#123;</span><br><span class="line">            OnFollowing(patrol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 玩家被捕</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPlayerCatched</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (GameOver != <span class="literal">null</span>) &#123;</span><br><span class="line">            GameOver();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间结束</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TimeIsUP</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Win != <span class="literal">null</span>) &#123;</span><br><span class="line">            Win();</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 FirstSceneController 中订阅事件，将不同的事件交给场记进行响应和处理。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FirstSceneController.cs</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 订阅游戏事件</span></span><br><span class="line">    GameEventManager.OnGoalLost += OnGoalLost;</span><br><span class="line">    GameEventManager.OnFollowing += OnFollowing;</span><br><span class="line">    GameEventManager.GameOver += GameOver;</span><br><span class="line">    GameEventManager.Win += Win;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    GameEventManager.OnGoalLost -= OnGoalLost;</span><br><span class="line">    GameEventManager.OnFollowing -= OnFollowing;</span><br><span class="line">    GameEventManager.GameOver -= GameOver;</span><br><span class="line">    GameEventManager.Win -= Win;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的方法如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FirstSceneController.cs</span></span><br><span class="line"><span class="comment">// 失去目标，巡逻兵放弃追击</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnGoalLost</span>(<span class="params">GameObject patrol</span>) </span>&#123;</span><br><span class="line">    patrolActionManager.Patrol(patrol);</span><br><span class="line">    scoreRecorder.Record();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 玩家进入范围，巡逻兵开始追击</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnFollowing</span>(<span class="params">GameObject patrol</span>) </span>&#123;</span><br><span class="line">    patrolActionManager.Follow(player, patrol);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GameOver</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gameState = GameState.LOSE;</span><br><span class="line">    StopAllCoroutines();</span><br><span class="line">    patrolFactory.PausePatrol();</span><br><span class="line">    player.GetComponent&lt;Animator&gt;().SetTrigger(<span class="string">"death"</span>);</span><br><span class="line">    patrolActionManager.DestroyAllActions();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 胜利</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Win</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gameState = GameState.WIN;</span><br><span class="line">    StopAllCoroutines();</span><br><span class="line">    patrolFactory.PausePatrol();</span><br><span class="line">    player.GetComponent&lt;Animator&gt;().SetBool(<span class="string">"pause"</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="游戏地图"><a href="#游戏地图" class="headerlink" title="游戏地图"></a>游戏地图</h2><p>利用 Plane, Cube 和下载的栅栏资源，设计一个具有九个正方形区域的地图。如下图：</p><img src="/2018/05/11/Unity-3D-智能巡逻兵/plane.png" title="地图"><p>在地图的每个区域中，放置一个空对象，并在对象上添加一个 Box Collider。通过空对象的 EnterRegion 脚本代码，检测玩家或巡逻兵进出区域的事件，并进行相应的操作。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnterRegion</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> region;                         <span class="comment">// 当前区域的区域编号</span></span><br><span class="line">    FirstSceneController sceneController;      <span class="comment">// 当前的场记</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider collider</span>) </span>&#123;</span><br><span class="line">        sceneController = Director.GetInstance().CurrentSceneController <span class="keyword">as</span> FirstSceneController;</span><br><span class="line">        <span class="keyword">if</span> (collider.gameObject.tag == <span class="string">"Player"</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果玩家进入区域，则标记玩家当前区域为该区域</span></span><br><span class="line">            sceneController.playerRegion = region;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerExit</span>(<span class="params">Collider collider</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (collider.gameObject.tag == <span class="string">"Patrol"</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果巡逻兵尝试离开区域，则标记巡逻兵发生了碰撞，以控制转向</span></span><br><span class="line">            collider.gameObject.GetComponent&lt;PatrolData&gt;().isCollided = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="巡逻兵"><a href="#巡逻兵" class="headerlink" title="巡逻兵"></a>巡逻兵</h2><p>在 Asset Store 中搜索 soldier，找到了一个骨骼、动画和贴图都不错的士兵模型包。其中有三种士兵可以选择。</p><img src="/2018/05/11/Unity-3D-智能巡逻兵/asset%20store.png" title="巡逻兵模型"><p>巡逻兵预制的结构如下，由头部和身体两大部分组成：</p><img src="/2018/05/11/Unity-3D-智能巡逻兵/patrol.png" title="巡逻兵结构"><p>在 Patrol 上添加一个 Capsule Collider，用于检测巡逻兵与障碍物、玩家的碰撞。在 Bip001 上添加一个 Capsule Collider，用于感知玩家。自定义 Collider 的形状，使巡逻兵具有一定视线范围，只能发现前方区域的玩家。如下图：</p><img src="/2018/05/11/Unity-3D-智能巡逻兵/patrol%20collider.png" title="巡逻兵搜索范围"><h3 id="巡逻兵数据"><a href="#巡逻兵数据" class="headerlink" title="巡逻兵数据"></a>巡逻兵数据</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PatrolData</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> isPlayerInRange;    <span class="comment">// 玩家是否在侦测范围里</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> isFollowing;        <span class="comment">// 是否正在追击</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> isCollided;         <span class="comment">// 是否发生碰撞</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> patrolRegion;        <span class="comment">// 巡逻兵所在区域</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> playerRegion;        <span class="comment">// 玩家所在区域</span></span><br><span class="line">    <span class="keyword">public</span> GameObject player;       <span class="comment">// 所追击的玩家</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="巡逻兵动画控制"><a href="#巡逻兵动画控制" class="headerlink" title="巡逻兵动画控制"></a>巡逻兵动画控制</h3><p>利用 shoot 和 pause 两个变量来控制巡逻兵的动画播放。</p><img src="/2018/05/11/Unity-3D-智能巡逻兵/patrol%20animator.png" title="巡逻兵动画"><h3 id="使用工厂模式生产巡逻兵"><a href="#使用工厂模式生产巡逻兵" class="headerlink" title="使用工厂模式生产巡逻兵"></a>使用工厂模式生产巡逻兵</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PatrolFactory</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> GameObject patrol = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;PatrolData&gt; used = <span class="keyword">new</span> List&lt;PatrolData&gt;(); <span class="comment">// 正在使用的巡逻兵</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;GameObject&gt; <span class="title">GetPatrols</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        List&lt;GameObject&gt; patrols = <span class="keyword">new</span> List&lt;GameObject&gt;();</span><br><span class="line">        <span class="keyword">float</span>[] pos_x = &#123; <span class="number">-4.5</span>f, <span class="number">1.5</span>f, <span class="number">7.5</span>f &#125;;</span><br><span class="line">        <span class="keyword">float</span>[] pos_z = &#123; <span class="number">7.5</span>f, <span class="number">1.5</span>f, <span class="number">-4.5</span>f &#125;;</span><br><span class="line">        <span class="comment">// 生产九个巡逻兵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                patrol = Instantiate(Resources.Load&lt;GameObject&gt;(<span class="string">"Prefabs/Patrol"</span>));</span><br><span class="line">                patrol.transform.position = <span class="keyword">new</span> Vector3(pos_x[j], <span class="number">0</span>, pos_z[i]);</span><br><span class="line">                patrol.GetComponent&lt;PatrolData&gt;().patrolRegion = i * <span class="number">3</span> + j + <span class="number">1</span>;</span><br><span class="line">                patrol.GetComponent&lt;PatrolData&gt;().playerRegion = <span class="number">4</span>;</span><br><span class="line">                patrol.GetComponent&lt;PatrolData&gt;().isPlayerInRange = <span class="literal">false</span>;</span><br><span class="line">                patrol.GetComponent&lt;PatrolData&gt;().isFollowing = <span class="literal">false</span>;</span><br><span class="line">                patrol.GetComponent&lt;PatrolData&gt;().isCollided = <span class="literal">false</span>;</span><br><span class="line">                patrol.GetComponent&lt;Animator&gt;().SetBool(<span class="string">"pause"</span>, <span class="literal">true</span>);</span><br><span class="line">                used.Add(patrol.GetComponent&lt;PatrolData&gt;());</span><br><span class="line">                patrols.Add(patrol);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> patrols;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PausePatrol</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 暂停所有侦查兵的动画</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; used.Count; i++) &#123;</span><br><span class="line">            used[i].gameObject.GetComponent&lt;Animator&gt;().SetBool(<span class="string">"pause"</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartPatrol</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 开始所有侦查兵的动画</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; used.Count; i++) &#123;</span><br><span class="line">            used[i].gameObject.GetComponent&lt;Animator&gt;().SetBool(<span class="string">"pause"</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检测巡逻兵的碰撞"><a href="#检测巡逻兵的碰撞" class="headerlink" title="检测巡逻兵的碰撞"></a>检测巡逻兵的碰撞</h3><p>在 Patrol 上添加 PatrolCollide，检测巡逻兵的碰撞事件。若巡逻兵碰撞玩家，则游戏结束；若巡逻兵碰撞其他障碍物，则标记碰撞状态，以便在巡逻兵动作中做相应的处理。此处也用到了订阅与发布模式，在游戏结束时发布玩家被捕事件，使订阅了事件的场记能做出相应的操作。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PatrolCollide</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision collision</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (collision.gameObject.tag == <span class="string">"Player"</span>) &#123;</span><br><span class="line">            <span class="comment">// 当玩家与巡逻兵相撞</span></span><br><span class="line">            <span class="keyword">this</span>.GetComponent&lt;Animator&gt;().SetTrigger(<span class="string">"shoot"</span>);</span><br><span class="line">            Singleton&lt;GameEventManager&gt;.Instance.OnPlayerCatched();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当巡逻兵碰到其他障碍物</span></span><br><span class="line">            <span class="keyword">this</span>.GetComponent&lt;PatrolData&gt;().isCollided = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="感知玩家"><a href="#感知玩家" class="headerlink" title="感知玩家"></a>感知玩家</h3><p>在 Bip001 上添加 PlayerInRange，利用 Bip001 上的 Capsule Collider 感知玩家进入追击范围。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerInRange</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider collider</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (collider.gameObject.tag == <span class="string">"Player"</span>) &#123;</span><br><span class="line">            <span class="comment">// 玩家进入巡逻兵追捕范围</span></span><br><span class="line">            <span class="keyword">this</span>.gameObject.transform.parent.GetComponent&lt;PatrolData&gt;().isPlayerInRange = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.gameObject.transform.parent.GetComponent&lt;PatrolData&gt;().player = collider.gameObject;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnTriggerExit</span>(<span class="params">Collider collider</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (collider.gameObject.tag == <span class="string">"Player"</span>) &#123;</span><br><span class="line">            <span class="comment">// 玩家离开巡逻兵追捕范围</span></span><br><span class="line">            <span class="keyword">this</span>.gameObject.transform.parent.GetComponent&lt;PatrolData&gt;().isPlayerInRange = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.gameObject.transform.parent.GetComponent&lt;PatrolData&gt;().player = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="巡逻兵动作"><a href="#巡逻兵动作" class="headerlink" title="巡逻兵动作"></a>巡逻兵动作</h3><p>巡逻兵巡逻动作如下。巡逻兵每次寻找新位置时，会随机选择其附近的一个位置，然后转向并移动到新的位置。若移动过程中碰到障碍物，则向后转，重新选择新的位置。其中采用了订阅与发布模式。当玩家进入追捕范围，巡逻兵开始追捕时，触发 FollowPlayer 事件，通知订阅者采取相应的操作（这里对应的操作是巡逻兵停止巡逻）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PatrolAction</span> : <span class="title">Action</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pos_x, pos_z;                 <span class="comment">// 移动前的初始x和z方向坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> turn = <span class="literal">true</span>;                   <span class="comment">// 是否选择新方向</span></span><br><span class="line">    <span class="keyword">private</span> PatrolData data;                    <span class="comment">// 巡逻兵的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PatrolAction <span class="title">GetAction</span>(<span class="params">Vector3 location</span>) </span>&#123;</span><br><span class="line">        PatrolAction action = CreateInstance&lt;PatrolAction&gt;();</span><br><span class="line">        action.pos_x = location.x;</span><br><span class="line">        action.pos_z = location.z;</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        data = <span class="keyword">this</span>.gameObject.GetComponent&lt;PatrolData&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Director.GetInstance().CurrentSceneController.getGameState().Equals(GameState.RUNNING)) &#123;</span><br><span class="line">            <span class="comment">// 巡逻兵巡逻</span></span><br><span class="line">            Patrol();</span><br><span class="line">            <span class="comment">// 如果满足要求，而巡逻兵未开始追击，则停止巡逻，开始追击</span></span><br><span class="line">            <span class="keyword">if</span> (!data.isFollowing &amp;&amp; data.isPlayerInRange &amp;&amp; data.patrolRegion == data.playerRegion &amp;&amp; !data.isCollided) &#123;</span><br><span class="line">                <span class="keyword">this</span>.destroy = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">this</span>.enable = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">this</span>.callback.ActionEvent(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">this</span>.gameObject.GetComponent&lt;PatrolData&gt;().isFollowing = <span class="literal">true</span>;</span><br><span class="line">                Singleton&lt;GameEventManager&gt;.Instance.FollowPlayer(<span class="keyword">this</span>.gameObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Patrol</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (turn) &#123;</span><br><span class="line">        <span class="comment">// 随机选择新位置</span></span><br><span class="line">            pos_x = <span class="keyword">this</span>.transform.position.x + Random.Range(<span class="number">-5</span>f, <span class="number">5</span>f);</span><br><span class="line">            pos_z = <span class="keyword">this</span>.transform.position.z + Random.Range(<span class="number">-5</span>f, <span class="number">5</span>f);</span><br><span class="line">            <span class="keyword">this</span>.transform.LookAt(<span class="keyword">new</span> Vector3(pos_x, <span class="number">0</span>, pos_z));</span><br><span class="line">            <span class="keyword">this</span>.gameObject.GetComponent&lt;PatrolData&gt;().isCollided = <span class="literal">false</span>;</span><br><span class="line">            turn = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">float</span> distance = Vector3.Distance(transform.position, <span class="keyword">new</span> Vector3(pos_x, <span class="number">0</span>, pos_z));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.gameObject.GetComponent&lt;PatrolData&gt;().isCollided) &#123;</span><br><span class="line">            <span class="comment">// 碰撞，则向后转，寻找新位置</span></span><br><span class="line">            <span class="keyword">this</span>.transform.Rotate(Vector3.up, <span class="number">180</span>);</span><br><span class="line">            GameObject temp = <span class="keyword">new</span> GameObject();</span><br><span class="line">            temp.transform.position = <span class="keyword">this</span>.transform.position;</span><br><span class="line">            temp.transform.rotation = <span class="keyword">this</span>.transform.rotation;</span><br><span class="line">            temp.transform.Translate(<span class="number">0</span>, <span class="number">0</span>, Random.Range(<span class="number">0.5</span>f, <span class="number">3</span>f));</span><br><span class="line">            pos_x = temp.transform.position.x;</span><br><span class="line">            pos_z = temp.transform.position.z;</span><br><span class="line">            <span class="keyword">this</span>.transform.LookAt(<span class="keyword">new</span> Vector3(pos_x, <span class="number">0</span>, pos_z));</span><br><span class="line">            <span class="keyword">this</span>.gameObject.GetComponent&lt;PatrolData&gt;().isCollided = <span class="literal">false</span>;</span><br><span class="line">            Destroy(temp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (distance &lt;= <span class="number">0.1</span>) &#123;</span><br><span class="line">        <span class="comment">// 到达目的，重新选择位置</span></span><br><span class="line">            turn = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 向前移动巡逻兵</span></span><br><span class="line">            <span class="keyword">this</span>.transform.Translate(<span class="number">0</span>, <span class="number">0</span>, Time.deltaTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>巡逻兵追捕玩家的动作如下。其中采用了订阅与发布模式。当玩家离开追捕范围，巡逻兵放弃追捕时，触发 PlayerEscape 事件，通知订阅者采取相应的操作（这里对应的操作是巡逻兵开始巡逻，游戏增加一分）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PatrolFollowAction</span> : <span class="title">Action</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> speed = <span class="number">1.5</span>f;          <span class="comment">// 跟随玩家的速度</span></span><br><span class="line">    <span class="keyword">private</span> GameObject player;           <span class="comment">// 玩家</span></span><br><span class="line">    <span class="keyword">private</span> PatrolData data;             <span class="comment">// 巡逻兵数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PatrolFollowAction <span class="title">GetAction</span>(<span class="params">GameObject player</span>) </span>&#123;</span><br><span class="line">        PatrolFollowAction action = CreateInstance&lt;PatrolFollowAction&gt;();</span><br><span class="line">        action.player = player;</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        data = <span class="keyword">this</span>.gameObject.GetComponent&lt;PatrolData&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Director.GetInstance().CurrentSceneController.getGameState().Equals(GameState.RUNNING)) &#123;</span><br><span class="line">            <span class="comment">// 追击玩家</span></span><br><span class="line">            transform.position = Vector3.MoveTowards(<span class="keyword">this</span>.transform.position, player.transform.position, speed * Time.deltaTime);</span><br><span class="line">            <span class="keyword">this</span>.transform.LookAt(player.transform.position);</span><br><span class="line">            <span class="comment">// 如果满足要求，而巡逻兵正在追击，则停止追击，开始巡逻</span></span><br><span class="line">            <span class="keyword">if</span> (data.isFollowing &amp;&amp; (!(data.isPlayerInRange &amp;&amp; data.patrolRegion == data.playerRegion) || data.isCollided)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.destroy = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">this</span>.enable = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">this</span>.callback.ActionEvent(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">this</span>.gameObject.GetComponent&lt;PatrolData&gt;().isFollowing = <span class="literal">false</span>;</span><br><span class="line">                Singleton&lt;GameEventManager&gt;.Instance.PlayerEscape(<span class="keyword">this</span>.gameObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 PatrolActionManager 统一管理巡逻兵的两个动作。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class PatrolActionManager : ActionManager, ActionCallback</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> PatrolAction patrol;</span><br><span class="line">    <span class="keyword">public</span> PatrolFollowAction follow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 巡逻</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Patrol</span>(<span class="params">GameObject ptrl</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.patrol = PatrolAction.GetAction(ptrl.transform.position);</span><br><span class="line">        <span class="keyword">this</span>.RunAction(ptrl, patrol, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 追击</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Follow</span>(<span class="params">GameObject player, GameObject patrol</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.follow = PatrolFollowAction.GetAction(player);</span><br><span class="line">        <span class="keyword">this</span>.RunAction(patrol, follow, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止所有动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DestroyAllActions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        DestroyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ActionEvent</span>(<span class="params">Action source, ActionEventType events = ActionEventType.Completed, <span class="keyword">int</span> intParam = <span class="number">0</span>, <span class="keyword">string</span> strParam = <span class="literal">null</span>, <span class="keyword">object</span> objectParam = <span class="literal">null</span></span>)</span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="玩家"><a href="#玩家" class="headerlink" title="玩家"></a>玩家</h2><p>玩家预制的结构如下，由头部、身体和背包三大部分组成。在顶层添加 Capsule Collider，检测玩家的碰撞。</p><img src="/2018/05/11/Unity-3D-智能巡逻兵/player.png" title="玩家结构"><h3 id="玩家动画控制"><a href="#玩家动画控制" class="headerlink" title="玩家动画控制"></a>玩家动画控制</h3><p>利用 run、pause 和 death 变量来控制玩家动画播放。</p><img src="/2018/05/11/Unity-3D-智能巡逻兵/player%20animator.png" title="玩家动画"><h3 id="移动玩家"><a href="#移动玩家" class="headerlink" title="移动玩家"></a>移动玩家</h3><p>在 UserGUI 类中的 Update 方法获取键盘方向输入，并调用 UserAction 中的 MovePlayer 方法实现玩家的移动。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserGUI.cs</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    action = Director.GetInstance().CurrentSceneController <span class="keyword">as</span> UserAction;</span><br><span class="line">    controller = Director.GetInstance().CurrentSceneController <span class="keyword">as</span> SceneController;</span><br><span class="line">    <span class="keyword">if</span> (controller.getGameState().Equals(GameState.RUNNING)) &#123;</span><br><span class="line">        <span class="comment">// 获取键盘输入</span></span><br><span class="line">        <span class="keyword">float</span> translationX = Input.GetAxis(<span class="string">"Horizontal"</span>);</span><br><span class="line">        <span class="keyword">float</span> translationZ = Input.GetAxis(<span class="string">"Vertical"</span>);</span><br><span class="line">        <span class="comment">//移动玩家</span></span><br><span class="line">        action.MovePlayer(translationX, translationZ);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 FirstSceneController 中实现 MovePlayer 方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FirstSceneController.cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MovePlayer</span>(<span class="params"><span class="keyword">float</span> translationX, <span class="keyword">float</span> translationZ</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (translationX != <span class="number">0</span> || translationZ != <span class="number">0</span>) &#123;</span><br><span class="line">        player.GetComponent&lt;Animator&gt;().SetBool(<span class="string">"run"</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        player.GetComponent&lt;Animator&gt;().SetBool(<span class="string">"run"</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    translationX *= Time.deltaTime;</span><br><span class="line">    translationZ *= Time.deltaTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转向指定的方向并向前移动</span></span><br><span class="line">    player.transform.LookAt(<span class="keyword">new</span> Vector3(player.transform.position.x + translationX, player.transform.position.y, player.transform.position.z + translationZ));</span><br><span class="line">    <span class="keyword">if</span> (translationX == <span class="number">0</span>)</span><br><span class="line">        player.transform.Translate(<span class="number">0</span>, <span class="number">0</span>, Mathf.Abs(translationZ) * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (translationZ == <span class="number">0</span>)</span><br><span class="line">        player.transform.Translate(<span class="number">0</span>, <span class="number">0</span>, Mathf.Abs(translationX) * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        player.transform.Translate(<span class="number">0</span>, <span class="number">0</span>, Mathf.Abs(translationZ) + Mathf.Abs(translationX));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="游戏倒计时"><a href="#游戏倒计时" class="headerlink" title="游戏倒计时"></a>游戏倒计时</h2><p>在导演中控制游戏倒计时，初始时间为 60 秒。当倒计时结束时，发布 TimeIsUp 事件，使订阅了事件的场记能够做出响应（游戏胜利）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Director : System.Object</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> leaveSeconds = <span class="number">60</span>;                               <span class="comment">// 当前剩余时间</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 游戏倒计时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">CountDown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (leaveSeconds &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">1</span>f</span>)</span>;</span><br><span class="line">            leaveSeconds--;</span><br><span class="line">            <span class="keyword">if</span> (leaveSeconds == <span class="number">0</span>) &#123;</span><br><span class="line">                Singleton&lt;GameEventManager&gt;.Instance.TimeIsUP();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="镜头跟随"><a href="#镜头跟随" class="headerlink" title="镜头跟随"></a>镜头跟随</h2><p>在 CameraFollowAction 中控制镜头跟随玩家移动<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CameraFollowAction</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> GameObject player;            <span class="comment">//相机跟随的物体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> smothing = <span class="number">5</span>f;          <span class="comment">//相机跟随的平滑速度</span></span><br><span class="line">    Vector3 offset;                      <span class="comment">//相机与物体相对偏移位置</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        offset = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">5</span>, <span class="number">-5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 设置摄像机目标位置</span></span><br><span class="line">        Vector3 target = player.transform.position + offset;</span><br><span class="line">        <span class="comment">// 摄像机自身位置到目标位置平滑过渡</span></span><br><span class="line">        transform.position = Vector3.Lerp(transform.position, target, smothing * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="游戏效果预览"><a href="#游戏效果预览" class="headerlink" title="游戏效果预览"></a>游戏效果预览</h1><img src="/2018/05/11/Unity-3D-智能巡逻兵/game.gif" title="游戏预览"><h1 id="游戏视频"><a href="#游戏视频" class="headerlink" title="游戏视频"></a>游戏视频</h1><p><a href="http://v.youku.com/v_show/id_XMzYwNTg1OTA1Mg==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="noopener">http://v.youku.com/v_show/id_XMzYwNTg1OTA1Mg==.html?spm=a2h3j.8428770.3416059.1</a></p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/Homework-6" target="_blank" rel="noopener">GitHub</a>.</p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p>[1] <a href="https://blog.csdn.net/c486c/article/details/80153548" target="_blank" rel="noopener">Unity3d 学习之路 - 简单巡逻兵</a>.</p><p>[2] <a href="https://blog.csdn.net/qq_33000225/article/details/70045292" target="_blank" rel="noopener">[Unity3D 课堂作业] 巡逻兵 GetAwayFromPatrols</a>.</p><p><em><a href="/2018/03/30/Unity-3D-Learning/" title="返回 Unity 3D Learning">返回 Unity 3D Learning</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;游戏要求&quot;&gt;&lt;a href=&quot;#游戏要求&quot; class=&quot;headerlink&quot; title=&quot;游戏要求&quot;&gt;&lt;/a&gt;游戏要求&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;游戏设计要求： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个地图和若干巡逻兵(使用动画)；&lt;/li&gt;
&lt;li&gt;每个
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D - Hit UFO 2.0</title>
    <link href="http://xungerrrr.github.io/2018/04/24/Unity-3D-Hit-UFO-2-0/"/>
    <id>http://xungerrrr.github.io/2018/04/24/Unity-3D-Hit-UFO-2-0/</id>
    <published>2018-04-24T10:55:43.000Z</published>
    <updated>2018-05-16T14:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="改进飞碟（Hit-UFO）游戏："><a href="#改进飞碟（Hit-UFO）游戏：" class="headerlink" title="改进飞碟（Hit UFO）游戏："></a>改进飞碟（Hit UFO）游戏：</h1><ul><li>游戏内容要求：<ul><li>按 adapter 模式设计图修改飞碟游戏</li><li>使它同时支持物理运动与运动学（变换）运动</li></ul></li></ul><h2 id="适配器（adapter）模式"><a href="#适配器（adapter）模式" class="headerlink" title="适配器（adapter）模式"></a>适配器（adapter）模式</h2><p>在<a href="/2018/04/17/Unity-3D-Hit-UFO/" title="上一版游戏">上一版游戏</a>的基础上，我们希望加入飞碟的物理运动，使游戏能在运动学运动和物理运动这两种模式下运行。为了重用代码，我们需要增加一个适配器，来完成从通用接口（飞碟运动）到两个不同的类（物理运动和运动学运动）的转换。在这里，我采用了<a href="https://blog.csdn.net/zxt0601/article/details/52848004#t4" target="_blank" rel="noopener">对象的适配器模式</a>，在适配器中包含两个不同类的实例，来完成特定飞碟运动接口的转换。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="实现物理运动"><a href="#实现物理运动" class="headerlink" title="实现物理运动"></a>实现物理运动</h3><p>参考运动学飞行的实现方式，定义一个物理运动的类 PhysicsAction，实现飞碟的物理运动。在 Start() 方法中，用 Rigidbody 组件设定初速度并添加重力，模拟物理运动。由于需要处理 Rigidbody 的物理运动，这里应使用FixedUpdate()方法进行更新，防止受到游戏帧率的影响。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> PhysicsAction.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PhysicsAction</span> : <span class="title">Action</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector3 startDirection;                     <span class="comment">// 初速度方向</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> power;                                <span class="comment">// 控制飞碟速度的变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PhysicsAction <span class="title">GetAction</span>(<span class="params">Vector3 direction, <span class="keyword">float</span> angle, <span class="keyword">float</span> power</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化飞碟的初速度方向</span></span><br><span class="line">        PhysicsAction action = CreateInstance&lt;PhysicsAction&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (direction.x == <span class="number">-1</span>) &#123;</span><br><span class="line">            action.startDirection = Quaternion.Euler(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, -angle)) * Vector3.left * power;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            action.startDirection = Quaternion.Euler(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, angle)) * Vector3.right * power;</span><br><span class="line">        &#125;</span><br><span class="line">        action.power = power;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设定初速度并添加重力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        gameObject.GetComponent&lt;Rigidbody&gt;().velocity = startDirection * power / <span class="number">10</span>;</span><br><span class="line">        gameObject.GetComponent&lt;Rigidbody&gt;().useGravity = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.transform.position.y &lt; <span class="number">-20</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.destroy = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.enable = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.callback.ActionEvent(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能够重写上面的 FixedUpdate() 方法，需要在 Action 类中添加方法原型：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> Action.cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同时，还需要在 ActionManager 中添加 FixedUpdate() 方法，来调用 Action 的 FixedUpdate() 方法：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> ActionManager.cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (Action action <span class="keyword">in</span> waitingAdd) &#123;</span><br><span class="line">        actions[action.GetInstanceID()] = action;</span><br><span class="line">    &#125;</span><br><span class="line">    waitingAdd.Clear();</span><br><span class="line">    <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="keyword">int</span>, Action&gt; kv <span class="keyword">in</span> actions) &#123;</span><br><span class="line">        Action action = kv.Value;</span><br><span class="line">        <span class="keyword">if</span> (action.enable) &#123;</span><br><span class="line">            action.FixedUpdate(); <span class="comment">// fix update action</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (action.destroy) &#123;</span><br><span class="line">            waitingDelete.Add(action.GetInstanceID()); <span class="comment">// release action</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">int</span> key <span class="keyword">in</span> waitingDelete) &#123;</span><br><span class="line">        Action action = actions[key];</span><br><span class="line">        actions.Remove(key);</span><br><span class="line">        DestroyObject(action);</span><br><span class="line">    &#125;</span><br><span class="line">    waitingDelete.Clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="定义物理运动的管理器"><a href="#定义物理运动的管理器" class="headerlink" title="定义物理运动的管理器"></a>定义物理运动的管理器</h3><p>参考 FlyActionManager，定义物理运动的管理器，来管理和执行物理运动。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> PhysicsActionManager.cs</span></span><br><span class="line">public class PhysicsActionManager : ActionManager, ActionCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PhysicsAction physics; <span class="comment">// 物理动作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 管理飞行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>(<span class="params">GameObject disk, <span class="keyword">float</span> angle, <span class="keyword">float</span> power</span>) </span>&#123;</span><br><span class="line">        physics = PhysicsAction.GetAction(disk.GetComponent&lt;DiskData&gt;().direction, angle, power);</span><br><span class="line">        <span class="keyword">this</span>.RunAction(disk, physics, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ActionEvent</span>(<span class="params">Action source, ActionEventType events = ActionEventType.Completed,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> intParam = <span class="number">0</span>, <span class="keyword">string</span> strParam = <span class="literal">null</span>, <span class="keyword">object</span> objectParam = <span class="literal">null</span></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="修改原有的飞行运动管理器"><a href="#修改原有的飞行运动管理器" class="headerlink" title="修改原有的飞行运动管理器"></a>修改原有的飞行运动管理器</h3><p>删除飞行管理器中的 SceneController 实例。实现方法与上面的物理运动管理器类似。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> FlyActionManager.cs</span></span><br><span class="line">public class FlyActionManager : ActionManager, ActionCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> FlyAction fly; <span class="comment">// 飞行动作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 管理飞行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span> (<span class="params">GameObject disk, <span class="keyword">float</span> angle, <span class="keyword">float</span> power</span>) </span>&#123;</span><br><span class="line">        fly = FlyAction.GetAction(disk.GetComponent&lt;DiskData&gt;().direction, angle, power);</span><br><span class="line">        <span class="keyword">this</span>.RunAction(disk, fly, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ActionEvent</span>(<span class="params">Action source, ActionEventType events = ActionEventType.Completed,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> intParam = <span class="number">0</span>, <span class="keyword">string</span> strParam = <span class="literal">null</span>, <span class="keyword">object</span> objectParam = <span class="literal">null</span></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="定义通用接口"><a href="#定义通用接口" class="headerlink" title="定义通用接口"></a>定义通用接口</h3><p>添加一个飞碟运动管理的通用接口。适配器继承这个接口来进行运动的适配。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> Interfaces.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IActionManager</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>(<span class="params">GameObject disk, <span class="keyword">float</span> angle, <span class="keyword">float</span> power, <span class="keyword">bool</span> physics</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实现适配器"><a href="#实现适配器" class="headerlink" title="实现适配器"></a>实现适配器</h3><p>适配器中包含两个运动管理器的实例，根据变量 physics 来调用不同的运动管理器，实现不同的运动模式。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> ActionManagerAdapter.cs</span></span><br><span class="line">public class ActionManagerAdapter : MonoBehaviour, IActionManager &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> FlyActionManager flyActionManager;</span><br><span class="line">    <span class="keyword">public</span> PhysicsActionManager physicsActionManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        flyActionManager = (FlyActionManager)gameObject.AddComponent&lt;FlyActionManager&gt;();</span><br><span class="line">        physicsActionManager = (PhysicsActionManager)gameObject.AddComponent&lt;PhysicsActionManager&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>(<span class="params">GameObject disk, <span class="keyword">float</span> angle, <span class="keyword">float</span> power, <span class="keyword">bool</span> physics</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 物理运动</span></span><br><span class="line">        <span class="keyword">if</span> (physics) &#123;</span><br><span class="line">            physicsActionManager.Fly(disk, angle, power);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 运动学运动</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            flyActionManager.Fly(disk, angle, power);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="修改-FirstSceneController"><a href="#修改-FirstSceneController" class="headerlink" title="修改 FirstSceneController"></a>修改 FirstSceneController</h3><ol><li>将原有的 FlyActionManager 实例修改为 ActionManagerAdapter 实例；</li><li>修改 ThrowDisk() 方法，调用通用接口提供的 Fly 方法，利用 physics 变量来控制不同的运动模式；</li><li>修改 Pause() 和 Begin() 方法，利用 Time.timeScale 实现物理运动的暂停（可恢复）。</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> FirstSceneController.cs</span></span><br><span class="line">public class FirstSceneController : MonoBehaviour, SceneController, UserAction &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> ActionManagerAdapter actionManager;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> physics = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 场景初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        actionManager = gameObject.AddComponent&lt;ActionManagerAdapter&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抛出飞碟</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ThrowDisk</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> position_x = <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">if</span> (diskQueue.Count != <span class="number">0</span>) &#123;</span><br><span class="line">            diskNumber--;</span><br><span class="line">            GameObject disk = diskQueue.Dequeue(); <span class="comment">// 取出飞碟</span></span><br><span class="line">            diskNotshot.Add(disk);</span><br><span class="line">            disk.SetActive(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置飞碟的随机位置</span></span><br><span class="line">            <span class="keyword">float</span> ran_y = Random.Range(<span class="number">1</span>f, <span class="number">4</span>f);</span><br><span class="line">            <span class="keyword">float</span> ran_x = Random.Range(<span class="number">-1</span>f, <span class="number">1</span>f) &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">            disk.GetComponent&lt;DiskData&gt;().direction = <span class="keyword">new</span> Vector3(ran_x, ran_y, <span class="number">0</span>);</span><br><span class="line">            Vector3 position = <span class="keyword">new</span> Vector3(-disk.GetComponent&lt;DiskData&gt;().direction.x * position_x, ran_y, <span class="number">0</span>);</span><br><span class="line">            disk.transform.position = position;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置飞碟初始所受的力和角度</span></span><br><span class="line">            <span class="keyword">float</span> power = Random.Range(<span class="number">10</span>f, <span class="number">15</span>f);</span><br><span class="line">            <span class="keyword">float</span> angle = Random.Range(<span class="number">15</span>f, <span class="number">28</span>f);</span><br><span class="line">            <span class="comment">// 通过 physics 变量控制运动模式</span></span><br><span class="line">            actionManager.Fly(disk, angle, power, physics);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; diskNotshot.Count; i++) &#123;</span><br><span class="line">            GameObject temp = diskNotshot[i];</span><br><span class="line">            <span class="comment">//飞碟飞出摄像机视野也没被打中</span></span><br><span class="line">            <span class="keyword">if</span> (temp.transform.position.y &lt; <span class="number">-20</span> &amp;&amp; temp.gameObject.activeSelf == <span class="literal">true</span>) &#123;</span><br><span class="line">                diskFactory.FreeDisk(diskNotshot[i]);</span><br><span class="line">                diskNotshot.Remove(diskNotshot[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暂停游戏</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pause</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        gameState = GameState.PAUSE;</span><br><span class="line">        Time.timeScale = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始游戏</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Begin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        gameState = GameState.START;</span><br><span class="line">        Time.timeScale = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="游戏运行方法"><a href="#游戏运行方法" class="headerlink" title="游戏运行方法"></a>游戏运行方法</h2><ol><li>在飞碟预制上添加 Rigidbody 组件，取消勾选重力（运动学运动不需要重力）；<img src="/2018/04/24/Unity-3D-Hit-UFO-2-0/rigidbody.png" title="rigidbody"></li><li>将 FirstSceneController.cs、DiskFactory.cs 和 ScoreRecorder.cs 挂在 Main Camera 上，利用 First Scene Controller 的 Physics 属性控制运动模式。运行后结果：<img src="/2018/04/24/Unity-3D-Hit-UFO-2-0/physics.png" title="physics"></li></ol><h2 id="游戏视频"><a href="#游戏视频" class="headerlink" title="游戏视频"></a>游戏视频</h2><p><a href="http://v.youku.com/v_show/id_XMzU2MjMxMDgyOA==.html?spm=a2hzp.8244740.0.0" target="_blank" rel="noopener">物理运动</a></p><p><a href="http://v.youku.com/v_show/id_XMzU0NTU3OTg5Ng==.html?spm=a2hzp.8244740.0.0" target="_blank" rel="noopener">运动学运动</a></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/master/Homework%205/Hit%20UFO%20(Physics)" target="_blank" rel="noopener">传送门</a></p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p>[1] <a href="https://blog.csdn.net/c486c/article/details/80052862" target="_blank" rel="noopener">Unity3d 学习之路 - 简单打飞碟 (适配器模式)</a>.</p><p>[2] <a href="https://blog.csdn.net/zxt0601/article/details/52848004" target="_blank" rel="noopener">设计模式 (二) 三种适配器模式 总结和使用场景</a>.</p><p>[3] <a href="https://blog.csdn.net/x2_yt/article/details/69049672" target="_blank" rel="noopener">Unity3D 学习笔记（6）– 打飞碟游戏改进版</a>.</p><a href="/2018/03/30/Unity-3D-Learning/" title="返回 Unity 3D Learning">返回 Unity 3D Learning</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;改进飞碟（Hit-UFO）游戏：&quot;&gt;&lt;a href=&quot;#改进飞碟（Hit-UFO）游戏：&quot; class=&quot;headerlink&quot; title=&quot;改进飞碟（Hit UFO）游戏：&quot;&gt;&lt;/a&gt;改进飞碟（Hit UFO）游戏：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;游戏内容要求：&lt;
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D - Hit UFO</title>
    <link href="http://xungerrrr.github.io/2018/04/17/Unity-3D-Hit-UFO/"/>
    <id>http://xungerrrr.github.io/2018/04/17/Unity-3D-Hit-UFO/</id>
    <published>2018-04-17T15:14:54.000Z</published>
    <updated>2018-05-16T14:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写一个简单的鼠标打飞碟（Hit-UFO）游戏"><a href="#编写一个简单的鼠标打飞碟（Hit-UFO）游戏" class="headerlink" title="编写一个简单的鼠标打飞碟（Hit UFO）游戏"></a>编写一个简单的鼠标打飞碟（Hit UFO）游戏</h1><ul><li>游戏内容要求：<ul><li>游戏有 n 个 round，每个 round 都包括 10 次 trial；</li><li>每个 trial 的飞碟的色彩、大小、发射位置、速度、角度、同时出现的个数都可能不同。它们由该 round 的 ruler 控制；</li><li>每个 trial 的飞碟有随机性，总体难度随 round 上升；</li><li>鼠标点中得分，得分规则按色彩、大小、速度不同计算，规则可自由设定。</li></ul></li><li>游戏的要求：<ul><li>使用带缓存的工厂模式管理不同飞碟的生产与回收，该工厂必须是场景单实例的！</li><li>尽可能使用前面 MVC 结构实现人机交互与游戏模型分离。</li></ul></li></ul><h1 id="游戏预览"><a href="#游戏预览" class="headerlink" title="游戏预览"></a>游戏预览</h1><img src="/2018/04/17/Unity-3D-Hit-UFO/UFO.PNG" title="UFO"><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/master/Homework%204/Hit%20UFO" target="_blank" rel="noopener">https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/master/Homework%204/Hit%20UFO</a></p><h1 id="游戏视频"><a href="#游戏视频" class="headerlink" title="游戏视频"></a>游戏视频</h1><p><a href="http://v.youku.com/v_show/id_XMzU0NTU3OTg5Ng==.html?spm=a2hzp.8244740.0.0" target="_blank" rel="noopener">http://v.youku.com/v_show/id_XMzU0NTU3OTg5Ng==.html?spm=a2hzp.8244740.0.0</a></p><a href="/2018/03/30/Unity-3D-Learning/" title="返回 Unity 3D Learning">返回 Unity 3D Learning</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编写一个简单的鼠标打飞碟（Hit-UFO）游戏&quot;&gt;&lt;a href=&quot;#编写一个简单的鼠标打飞碟（Hit-UFO）游戏&quot; class=&quot;headerlink&quot; title=&quot;编写一个简单的鼠标打飞碟（Hit UFO）游戏&quot;&gt;&lt;/a&gt;编写一个简单的鼠标打飞碟（Hit 
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Vi, Java, Ant 和 JUnit 的学习报告</title>
    <link href="http://xungerrrr.github.io/2018/04/15/Vi-Java-Ant-%E5%92%8C-JUnit-%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/"/>
    <id>http://xungerrrr.github.io/2018/04/15/Vi-Java-Ant-和-JUnit-的学习报告/</id>
    <published>2018-04-15T14:10:17.000Z</published>
    <updated>2018-04-15T14:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vi-编辑器"><a href="#Vi-编辑器" class="headerlink" title="Vi 编辑器"></a>Vi 编辑器</h1><p>Vi 编辑器是 Linux 和 Unix 系统中的标准文本编辑器，功能强大，使用方便。在这次实训中，我掌握了 Vi 编辑器的一些基本用法。</p><h2 id="进入-Vi-的方法"><a href="#进入-Vi-的方法" class="headerlink" title="进入 Vi 的方法"></a>进入 Vi 的方法</h2><p>在系统提示符后输入 vi filename 即可进入 vi 编辑器编辑对应的文件。</p><h2 id="Vi-的基本概念和使用方法"><a href="#Vi-的基本概念和使用方法" class="headerlink" title="Vi 的基本概念和使用方法"></a>Vi 的基本概念和使用方法</h2><p>在 Vi 编辑器中，有三种模式，分别是命令模式、插入模式和底行模式。为了简化，一般将底行模式归入命令模式中。</p><ul><li><p>命令模式 (Command Mode)</p><p>这是进入 Vi 的默认模式。在命令模式中，可以控制光标移动，对字符和段落进行删除、复制和移动等操作。在命令模式中按 “i”, “a” 或 “o” 键可以进入插入模式，按 “:” 键进入底行模式。</p></li><li><p>插入模式 (Insert Mode)</p><p>在插入模式中，可以输入文字，编辑文本内容。在插入模式中按 Esc 键可以回到命令模式。</p></li><li><p>底行模式 (Last Line Mode)</p><p>在底行模式中，可以保存文件 (w)，退出 Vi (q)，也可以对编辑界面做基本的设置和操作，如列出行号 (set nu)、跳到某一行和查找字符。</p></li></ul><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java 是一种完全面向对象的编程语言，与 C++ 语言有许多相近之处。相比于 C++，Java 移除了一些容易出错的特征，例如指针和多重继承，而提高了垃圾自动回收的能力。下面是在自学过程中学到的一些 Java 与 C++ 的不同之处。</p><ul><li><p>与 C++ 一样，Java 程序同样以 main 函数作为执行入口，但 Java 中的 main 函数需要写在程序的一个主类中，作为类的一个静态方法。</p></li><li><p>除了 class (类)，Java 还提供 interface (接口) 语法，方便程序员将接口从类的具体定义中剥离出来，成为独立的接口概念。在接口中，不需要定义方法的主体和可见性，因为接口需要由具体的类来实现，而且根据接口的定义，接口的可见性都为 public。</p></li><li><p>类的继承要使用 extends 语句，接口的实现要使用 implements 语句。</p></li><li><p>Java 中有包 (package) 的概念，可以更好地组织和使用项目中的 Java 程序，也提高了程序的可移植性。包的名字与程序的路径相对应。在程序的开始用 package 建立包，用 import 调用包。</p></li><li><p>C++ 中类可以多重继承，而 Java 中只有接口能够多重继承。</p></li></ul><h1 id="Ant"><a href="#Ant" class="headerlink" title="Ant"></a>Ant</h1><p>Ant 是一个跨平台的构建工具，它可以实现项目的自动构建和部署等功能，通常用来构建 Java 程序。</p><p>Ant 的构建文件是 xml 文件，非常便于阅读和组织。</p><h2 id="Ant-的基础元素"><a href="#Ant-的基础元素" class="headerlink" title="Ant 的基础元素"></a>Ant 的基础元素</h2><ul><li><p>project</p><p>project 元素是 Ant 构建文件的根元素。project 元素中包含 target 元素。project 元素有许多属性，例如 name 属性指定 project 的名称，default 属性指定默认的 target，basedir 属性指定基路径的位置。</p></li><li><p>target</p><p>target 元素是 Ant 的基本执行单元，可以包含一个或多个任务。target 之间可以有依赖关系。target 元素也有不同的属性，如 name 属性指定 target 的名称，depends 属性描述 target 之间的依赖关系，if 属性验证指定的属性是否存在，description 属性用来描述 target 的功能。</p></li><li><p>property</p><p>property 元素是参数的定义，可以用作其他元素的属性。通过${name}可以获取 property 元素的值。</p></li></ul><h2 id="Ant-的常用功能"><a href="#Ant-的常用功能" class="headerlink" title="Ant 的常用功能"></a>Ant 的常用功能</h2><p>利用 Ant 可以自动完成许多基本功能，如复制、删除、创建和移动目录、文件。利用 Ant 也可以使用 javac、java 和 jar 等命令自动化构建和部署 Java 项目。Ant 与 JUnit 结合使用，可以十分方便地对程序进行测试。</p><h2 id="Ant-构建文件示例"><a href="#Ant-构建文件示例" class="headerlink" title="Ant 构建文件示例"></a>Ant 构建文件示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"Calculator"</span> <span class="attr">default</span>=<span class="string">"jar"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"clean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">"bin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"compile"</span> <span class="attr">depends</span>=<span class="string">"clean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">"bin/classes"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javac</span> <span class="attr">srcdir</span>=<span class="string">"src"</span> <span class="attr">destdir</span>=<span class="string">"bin/classes"</span> <span class="attr">includeAntRuntime</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"run"</span> <span class="attr">depends</span>=<span class="string">"compile"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">classname</span>=<span class="string">"Calculator"</span> <span class="attr">fork</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classpath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pathelement</span> <span class="attr">path</span>=<span class="string">"bin/classes"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">classpath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"jar"</span> <span class="attr">depends</span>=<span class="string">"run"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jar</span> <span class="attr">destfile</span>=<span class="string">"calculator.jar"</span> <span class="attr">basedir</span>=<span class="string">"bin/classes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"Main-class"</span> <span class="attr">value</span>=<span class="string">"Calculator"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行命令 ant，可以自动完成 Calculator 程序的清理、编译、运行和打包。</p><h1 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h1><p>Junit 是一款功能强大的单元测试工具，它简化了开发人员执行单元测试的难度，而 JUnit 4 中使用了 Java 5 的注解 (Annotation)，使测试用例的编写变得更加简单。</p><h2 id="JUnit-4-使用的-Annotation"><a href="#JUnit-4-使用的-Annotation" class="headerlink" title="JUnit 4 使用的 Annotation"></a>JUnit 4 使用的 Annotation</h2><ul><li><p>@Before</p><p>使用这个注解的方法只能有一个，并且要在每个测试方法执行之前都执行一次。</p></li><li><p>@After</p><p>使用这个注解的方法只能有一个，并且要在每个测试方法执行之后都执行一次。</p></li><li><p>@Test</p><p>使用这个注解的方法为测试方法。</p></li><li><p>@Test(expected=*.class)</p><p>expected 属性的值是一个异常类型，使用这个注解可以测试程序运行中的错误。</p></li><li><p>@Test(timeout=xxx)</p><p>这个注解可以给测试设定最大执行时间。只有在规定时间内执行完成才算成功。</p></li><li><p>@Ignore</p><p>使用这个注解的方法会被忽略。可以应用于暂时不用或者是没有实现的测试方法。</p></li></ul><h2 id="使用-Junit-测试-HelloWorld"><a href="#使用-Junit-测试-HelloWorld" class="headerlink" title="使用 Junit 测试 HelloWorld"></a>使用 Junit 测试 HelloWorld</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---HelloWorld 类---</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">str = <span class="string">"Hello Junit!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String str = <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---HelloWorldTest 类---</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> HelloWorld helloworld = <span class="keyword">new</span> HelloWorld();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">helloworld.hello();</span><br><span class="line">assertEquals(<span class="string">"Hello Junit!"</span>, helloworld.getStr());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并运行测试程序，可以对 HelloWorld 类进行测试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vi-编辑器&quot;&gt;&lt;a href=&quot;#Vi-编辑器&quot; class=&quot;headerlink&quot; title=&quot;Vi 编辑器&quot;&gt;&lt;/a&gt;Vi 编辑器&lt;/h1&gt;&lt;p&gt;Vi 编辑器是 Linux 和 Unix 系统中的标准文本编辑器，功能强大，使用方便。在这次实训中，我掌握了
      
    
    </summary>
    
    
      <category term="Java" scheme="http://xungerrrr.github.io/tags/Java/"/>
    
      <category term="Linux" scheme="http://xungerrrr.github.io/tags/Linux/"/>
    
      <category term="实训" scheme="http://xungerrrr.github.io/tags/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>用于图像分类的深度稀疏编码网络</title>
    <link href="http://xungerrrr.github.io/2018/04/12/%E7%94%A8%E4%BA%8E%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E7%9A%84%E6%B7%B1%E5%BA%A6%E7%A8%80%E7%96%8F%E7%BC%96%E7%A0%81%E7%BD%91%E7%BB%9C/"/>
    <id>http://xungerrrr.github.io/2018/04/12/用于图像分类的深度稀疏编码网络/</id>
    <published>2018-04-12T05:24:09.000Z</published>
    <updated>2018-05-16T14:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模型优势"><a href="#模型优势" class="headerlink" title="模型优势"></a>模型优势</h2><p>Combine the advantages of Convolutional Neural Network (CNN) and sparse-coding techniques for image feature representation.</p><h2 id="四个基本层："><a href="#四个基本层：" class="headerlink" title="四个基本层："></a>四个基本层：</h2><ul><li>Sparse-coding layer</li><li>Pooling layer</li><li>Normalization layer</li><li>Map reduction layer</li></ul><h3 id="Sparse-coding-layer"><a href="#Sparse-coding-layer" class="headerlink" title="Sparse-coding layer"></a>Sparse-coding layer</h3><p>取测试图片位置 (i, j) 的局部区域，得到一个 D 维的特征向量，D = C <em> w </em> w，其中 C 是特征类型的数量，w 是区域的宽度。结合训练向量，求出向量2-范数的最小值，得到每个区域在给定字典中的稀疏编码。</p><h3 id="Pooling-layer"><a href="#Pooling-layer" class="headerlink" title="Pooling layer"></a>Pooling layer</h3><h3 id="Normalization-layer"><a href="#Normalization-layer" class="headerlink" title="Normalization layer"></a>Normalization layer</h3><h3 id="Map-reduction-layer"><a href="#Map-reduction-layer" class="headerlink" title="Map reduction layer"></a>Map reduction layer</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模型优势&quot;&gt;&lt;a href=&quot;#模型优势&quot; class=&quot;headerlink&quot; title=&quot;模型优势&quot;&gt;&lt;/a&gt;模型优势&lt;/h2&gt;&lt;p&gt;Combine the advantages of Convolutional Neural Network (CNN) a
      
    
    </summary>
    
    
      <category term="Image-Understanding" scheme="http://xungerrrr.github.io/tags/Image-Understanding/"/>
    
      <category term="Pattern-Recognition" scheme="http://xungerrrr.github.io/tags/Pattern-Recognition/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D - 牧师与魔鬼 2.0</title>
    <link href="http://xungerrrr.github.io/2018/04/10/Unity-3D-%E7%89%A7%E5%B8%88%E4%B8%8E%E9%AD%94%E9%AC%BC-2-0/"/>
    <id>http://xungerrrr.github.io/2018/04/10/Unity-3D-牧师与魔鬼-2-0/</id>
    <published>2018-04-10T05:41:23.000Z</published>
    <updated>2018-04-10T13:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作与总结"><a href="#操作与总结" class="headerlink" title="操作与总结"></a>操作与总结</h1><h2 id="参考-Fantasy-Skybox-FREE-构建自己的游戏场景"><a href="#参考-Fantasy-Skybox-FREE-构建自己的游戏场景" class="headerlink" title="参考 Fantasy Skybox FREE 构建自己的游戏场景"></a>参考 Fantasy Skybox FREE 构建自己的游戏场景</h2><p>利用 Skybox 和 Terrain 构建游戏场景。Unity 的 Terrain 有十分方便的地形设计工具，利用它可以轻松绘制自己的地形及素材。地形工具和场景效果如下：</p><img src="/2018/04/10/Unity-3D-牧师与魔鬼-2-0/Terrain.png" title="Terrain"><img src="/2018/04/10/Unity-3D-牧师与魔鬼-2-0/Scene.png" title="Scene"><h2 id="总结游戏对象的使用"><a href="#总结游戏对象的使用" class="headerlink" title="总结游戏对象的使用"></a>总结游戏对象的使用</h2><h3 id="常用游戏对象"><a href="#常用游戏对象" class="headerlink" title="常用游戏对象"></a>常用游戏对象</h3><ul><li>空对象 (Empty)：不显示的游戏对象，一般用于挂载管理器等脚本。</li><li>摄像机 (Camera)：游戏显示画面的来源。创建多个摄像机可以展现多个游戏视角。</li><li>3D 物体 (3D Object)：游戏中的三维物体，由三角面拼接而成。</li><li>2D 物体 (2D Object)：游戏中的二维物体。</li><li>光线 (Light)：游戏画面表现的灵魂所在，用于营造游戏场景的光线效果。</li><li>声音 (Audio)：游戏中的声音素材，例如背景音乐。</li><li>视频 (Video)：游戏中的视频素材。</li><li>UI：游戏中用户的交互接口，如按钮。</li></ul><h3 id="游戏对象的使用方法"><a href="#游戏对象的使用方法" class="headerlink" title="游戏对象的使用方法"></a>游戏对象的使用方法</h3><p>游戏对象有不同的创建方法，可以在游戏运行前创建，可以在游戏运行过程中动态创建，还可以使用预设创建对象。创建位置变化不大、数量较少的对象可以采用前两种方法，而创建大量重复的、类似的对象则采用预设方法较好。</p><p>游戏对象有各种各样的组件 (Component)，组件决定了游戏对象在游戏中的表现形式，包括外观和动作。使用组件时，应该仔细查阅文档，了解组件各个属性的功能和用法，再根据游戏的设计，实现游戏对象的各个需求。</p><h1 id="编程实践：牧师与魔鬼-动作分离版"><a href="#编程实践：牧师与魔鬼-动作分离版" class="headerlink" title="编程实践：牧师与魔鬼 动作分离版"></a>编程实践：牧师与魔鬼 动作分离版</h1><p>基础版本：<a href="/2018/04/01/Unity-3D-牧师与魔鬼/" title="牧师与魔鬼基础 MVC 版">牧师与魔鬼基础 MVC 版</a></p><p>在上一个版本中，我实现了该游戏的基本 MVC 架构，但是，场记和控制器负责的功能太多，导致代码耦合性太强。这一版本将游戏对象的基本动作抽离出来，并引入动作管理器来管理动作，更好地实现了模块间的松耦合，提高了代码的复用性。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="实现动作基类"><a href="#实现动作基类" class="headerlink" title="实现动作基类"></a>实现动作基类</h3><p>在动作基类里面，要声明游戏对象的动作的基本属性和方法。在这个游戏中，游戏对象只有直线运动，因此动作基类只需包含一个用于指定对象的 GameObject 属性和一个用于指定运动路径的 Transform 属性。虚函数 Start 和 Update 是实现动作的基本方法，需要由子类重载。动作基类的实现如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SSAction</span> : <span class="title">ScriptableObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> enable = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> destroy = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> GameObject GameObject &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Transform Transform &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> ISSActionCallback Callback &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SSAction</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现直线运动"><a href="#实现直线运动" class="headerlink" title="实现直线运动"></a>实现直线运动</h3><p>定义 SSMoveToAction 类，并继承动作基类，来实现对象的直线运动。具体实现如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SSMoveToAction</span> : <span class="title">SSAction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Vector3 target; <span class="comment">// 移动目标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> speed; <span class="comment">// 移动速度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建并返回动作的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSMoveToAction <span class="title">GetSSMoveToAction</span>(<span class="params">Vector3 target, <span class="keyword">float</span> speed</span>) </span>&#123;</span><br><span class="line">        SSMoveToAction action = ScriptableObject.CreateInstance&lt;SSMoveToAction&gt;();</span><br><span class="line">        action.target = target;</span><br><span class="line">        action.speed = speed;</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 Update 函数中用 Vector3.MoveTowards 实现直线运动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Transform.position = Vector3.MoveTowards(<span class="keyword">this</span>.Transform.position, target, speed * Time.deltaTime);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Transform.position == target) &#123;</span><br><span class="line">            <span class="keyword">this</span>.destroy = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 完成动作后进行动作回掉</span></span><br><span class="line">            <span class="keyword">this</span>.Callback.SSActionEvent(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现动作序列"><a href="#实现动作序列" class="headerlink" title="实现动作序列"></a>实现动作序列</h3><p>在游戏中，船的动作是简单的直线运动，而游戏角色的运动是由两段直线运动组成的折线运动。通过定义 SSSequenceAction 类，将基本动作(直线运动)组合在一起，可以实现折现运动。在这个类中，用 List<ssaction> 列表记录待执行的动作序列，并依次执行，执行完毕后清空列表，从而完成动作的组合（其中可以自定义循环的次数）。具体实现如下：</ssaction></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class SSSequenceAction : SSAction, ISSActionCallback &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;SSAction&gt; sequence; <span class="comment">// 动作队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> repeat = <span class="number">-1</span>; <span class="comment">// 循环次数，-1表示无限循环</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> start = <span class="number">0</span>; <span class="comment">// 当前执行的动作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建并返回动作序列的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSSequenceAction <span class="title">GetSSSequenceAction</span>(<span class="params"><span class="keyword">int</span> repeat, <span class="keyword">int</span> start, List&lt;SSAction&gt; sequence</span>) </span>&#123;</span><br><span class="line">        SSSequenceAction action = ScriptableObject.CreateInstance&lt;SSSequenceAction&gt;();</span><br><span class="line">        action.repeat = repeat;</span><br><span class="line">        action.sequence = sequence;</span><br><span class="line">        action.start = start;</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (SSAction action <span class="keyword">in</span> sequence) &#123;</span><br><span class="line">            action.GameObject = <span class="keyword">this</span>.GameObject;</span><br><span class="line">            action.Transform = <span class="keyword">this</span>.Transform;</span><br><span class="line">            action.Callback = <span class="keyword">this</span>;</span><br><span class="line">            action.Start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 Update 中执行当前动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sequence.Count == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; sequence.Count) &#123;</span><br><span class="line">            sequence[start].Update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行完毕后销毁动作</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (SSAction action <span class="keyword">in</span> sequence) &#123;</span><br><span class="line">            DestroyObject(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新当前执行的动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SSActionEvent</span>(<span class="params">SSAction source, SSActionEventType events = SSActionEventType.Completed,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> intParam = <span class="number">0</span>, <span class="keyword">string</span> strParam = <span class="literal">null</span>, <span class="keyword">object</span> objectParam = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">        source.destroy = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.start++;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.start &gt;= sequence.Count) &#123;</span><br><span class="line">            <span class="keyword">this</span>.start = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (repeat &gt; <span class="number">0</span>) repeat--;</span><br><span class="line">            <span class="keyword">if</span> (repeat == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.destroy = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">this</span>.Callback.SSActionEvent(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现动作管理"><a href="#实现动作管理" class="headerlink" title="实现动作管理"></a>实现动作管理</h3><p>在定义基本动作和动作序列之后，需要有一个基础动作管理器来管理要执行的动作，它继承自 MonoBehaviour，以便实现对游戏对象动作的控制。以下是 SSActionManager 类的定义：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SSActionManager</span>: <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="keyword">int</span>, SSAction&gt; actions = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, SSAction&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;SSAction&gt; waitingAdd = <span class="keyword">new</span> List&lt;SSAction&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="keyword">int</span>&gt; waitingDelete = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (SSAction action <span class="keyword">in</span> waitingAdd) &#123;</span><br><span class="line">            actions[action.GetInstanceID()] = action;</span><br><span class="line">        &#125;</span><br><span class="line">        waitingAdd.Clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="keyword">int</span>, SSAction&gt; KeyValue <span class="keyword">in</span> actions) &#123;</span><br><span class="line">            SSAction action = KeyValue.Value;</span><br><span class="line">            <span class="keyword">if</span> (action.destroy) &#123;</span><br><span class="line">                <span class="comment">// release action</span></span><br><span class="line">                waitingDelete.Add(action.GetInstanceID());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (action.enable) &#123;</span><br><span class="line">                <span class="comment">// update action</span></span><br><span class="line">                action.Update();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">int</span> key <span class="keyword">in</span> waitingDelete) &#123;</span><br><span class="line">            SSAction action = actions[key];</span><br><span class="line">            actions.Remove(key);</span><br><span class="line">            DestroyObject(action);</span><br><span class="line">        &#125;</span><br><span class="line">        waitingDelete.Clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RunAction</span>(<span class="params">GameObject gameObject, SSAction action, ISSActionCallback callback</span>) </span>&#123;</span><br><span class="line">        action.GameObject = gameObject;</span><br><span class="line">        action.Transform = gameObject.transform;</span><br><span class="line">        action.Callback = callback;</span><br><span class="line">        waitingAdd.Add(action);</span><br><span class="line">        action.Start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改原有的游戏动作"><a href="#修改原有的游戏动作" class="headerlink" title="修改原有的游戏动作"></a>修改原有的游戏动作</h3><p>分离好动作后，要修改原来的动作执行方式。首先定义一个具体的动作管理者，继承自上述的基础动作管理者，来管理第一个游戏场景的动作（本游戏仅有一个场景）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class FirstActionManager : SSActionManager, ISSActionCallback &#123;</span><br><span class="line">    <span class="comment">// 移动船</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MoveBoat</span>(<span class="params">BoatController boatController</span>) </span>&#123;</span><br><span class="line">        SSMoveToAction action = SSMoveToAction.GetSSMoveToAction(boatController.getDestination(), <span class="number">20</span>);</span><br><span class="line">        RunAction(boatController.boat, action, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动角色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MoveCharacter</span>(<span class="params">MyCharacterController myCharacterController, Vector3 destination</span>) </span>&#123;</span><br><span class="line">        Vector3 current = myCharacterController.character.transform.position;</span><br><span class="line">        Vector3 middle = destination; <span class="comment">// 利用 middle 实现折线运动</span></span><br><span class="line">        <span class="keyword">if</span> (destination.y &lt; current.y) &#123;</span><br><span class="line">            middle.y = current.y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            middle.x = current.x;</span><br><span class="line">        &#125;</span><br><span class="line">        SSAction firstMove = SSMoveToAction.GetSSMoveToAction(middle, <span class="number">20</span>);</span><br><span class="line">        SSAction secondMove = SSMoveToAction.GetSSMoveToAction(destination, <span class="number">20</span>);</span><br><span class="line">        SSAction sequenceAction = SSSequenceAction.GetSSSequenceAction(<span class="number">1</span>, <span class="number">0</span>, <span class="keyword">new</span> List&lt;SSAction&gt; &#123; firstMove, secondMove &#125;);</span><br><span class="line">        RunAction(myCharacterController.character, sequenceAction, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SSActionEvent</span>(<span class="params">SSAction source, SSActionEventType events = SSActionEventType.Completed,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> intParam = <span class="number">0</span>, <span class="keyword">string</span> strParam = <span class="literal">null</span>, <span class="keyword">object</span> objectParam = <span class="literal">null</span></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着修改 FirstController 中的动作内容，利用 FirstActionManager 来调用动作的执行。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class FirstController : MonoBehaviour, SceneController, IUserAction &#123;</span><br><span class="line">    <span class="keyword">private</span> FirstActionManager actionManager;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        actionManager = GetComponent&lt;FirstActionManager&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveBoat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (boat.isEmpty ())</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      actionManager.MoveBoat(boat); <span class="comment">// 移动船</span></span><br><span class="line">      boat.ChangePosition(); <span class="comment">// 修改船的位置属性</span></span><br><span class="line">      userGUI.status = check_game_over ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characterIsClicked</span>(<span class="params">MyCharacterController characterCtrl</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (characterCtrl.isOnBoat ()) &#123;</span><br><span class="line">            ShoreController whichShore;</span><br><span class="line">            <span class="keyword">if</span> (boat.get_to_or_from () == <span class="number">-1</span>) &#123; <span class="comment">// to-&gt;-1; from-&gt;1</span></span><br><span class="line">                whichShore = toShore;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                whichShore = fromShore;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            boat.GetOffBoat (characterCtrl.getName());</span><br><span class="line">            <span class="comment">// 移动角色</span></span><br><span class="line">            actionManager.MoveCharacter(characterCtrl, whichShore.getEmptyPosition());</span><br><span class="line">            characterCtrl.getOnShore (whichShore);</span><br><span class="line">            whichShore.getOnShore (characterCtrl);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// character on shore</span></span><br><span class="line">            ShoreController whichShore = characterCtrl.getShoreController ();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (boat.getEmptyIndex () == <span class="number">-1</span>) &#123; <span class="comment">// boat is full</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (whichShore.get_to_or_from () != boat.get_to_or_from ())<span class="comment">// boat is not on the side of character</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            whichShore.getOffShore(characterCtrl.getName());</span><br><span class="line">            <span class="comment">// 移动角色</span></span><br><span class="line">            actionManager.MoveCharacter(characterCtrl, boat.getEmptyPosition());</span><br><span class="line">            characterCtrl.getOnBoat (boat);</span><br><span class="line">            boat.GetOnBoat (characterCtrl);</span><br><span class="line">        &#125;</span><br><span class="line">        userGUI.status = check_game_over ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，动作分离全部完成。</p><h2 id="第二版游戏美化"><a href="#第二版游戏美化" class="headerlink" title="第二版游戏美化"></a>第二版游戏美化</h2><p>在游戏中，加入了天空盒和水环境，使得整体界面比上一版更加美观，立体感更强。</p><img src="/2018/04/10/Unity-3D-牧师与魔鬼-2-0/Priests%20and%20Devils%202.0.png" title="Priests and Devils 2.0"><p>游戏预览视频及完整项目见 <a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/master/Homework%203" target="_blank" rel="noopener">GitHub</a>.</p><a href="/2018/03/30/Unity-3D-Learning/" title="返回 Unity 3D Learning">返回 Unity 3D Learning</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作与总结&quot;&gt;&lt;a href=&quot;#操作与总结&quot; class=&quot;headerlink&quot; title=&quot;操作与总结&quot;&gt;&lt;/a&gt;操作与总结&lt;/h1&gt;&lt;h2 id=&quot;参考-Fantasy-Skybox-FREE-构建自己的游戏场景&quot;&gt;&lt;a href=&quot;#参考-Fantas
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>基于稀疏表示的人脸识别</title>
    <link href="http://xungerrrr.github.io/2018/04/06/%E5%9F%BA%E4%BA%8E%E7%A8%80%E7%96%8F%E8%A1%A8%E7%A4%BA%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    <id>http://xungerrrr.github.io/2018/04/06/基于稀疏表示的人脸识别/</id>
    <published>2018-04-06T13:18:21.000Z</published>
    <updated>2018-05-16T14:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一周阅读了题为 <a href="https://ieeexplore.ieee.org/document/4483511/" target="_blank" rel="noopener">Robust Face Recognition via Sparse Representation</a> 的论文，了解到了一种基于稀疏表示的人脸识别技术。这里简要概括了论文的内容，给出了我个人对论文的基本理解。</p><p>这篇论文考虑的问题是，在不同的人物表情、照明条件或者是在失真、遮挡条件下，如何从正面自动识别出特定的人脸。基于通过计算向量1-范数最小值得到的稀疏表示，论文提出了一种用于物体（人脸）识别的通用分类算法。这种算法不仅很好地实现了理想条件下的人脸识别，还能够有效应对实际中的复杂情况，例如物体遮挡和照片失真，并且在与各种常见的特征提取方法结合时，都有着较高的识别率。</p><p>人脸识别的问题，可以概括为，利用多个来自不同类别的训练样本，来判断一个给定的测试样本属于哪一个类别。在人脸识别中，一个人脸就是一个类别，不同的人脸照片就是不同的样本。</p><p>考虑k个类别，设每一个分辨率为 w×h 的样本都可以用一个 m(m = wh) 维向量v来表示，类别 i 有 n_i 个训练样本，则类别 i 可以表示为一个 m×n_i 的矩阵 A_i=[v_(i,1),v_(i,2),…,v_(i,n_i)]。在训练样本充足的情况下，一个属于类别 i 的新测试样本 y∈R^m 可以表示为 A_i 的列向量的线性组合。但是，在识别的过程中，我们无法得知测试样本所属的类别，因此可以构建一个表示所有类别的矩阵 A=[A_1,A_2,…,A_k]∈R^(m×n)，将新测试样本表示成矩阵A的列向量的线性组合，即 y=Ax_0 。其中 x_0∈R^n ，是线性组合的系数向量，其非零元素是与类别 i 有关的系数项。通过求方程 y=Ax 的解，可以推断出样本 y 所属的类别。</p><p>然而，在现实条件下， m 往往小于 n ，因此方程有无穷多个解。为了找到最佳的识别类别，需要求出最稀疏的解（即x大部分元素为零）。论文提出了通过求向量 x 的1-范数的最小值，来得到y的最稀疏表示。其证明过程，我仍未完全理解。总的来说，只要 x_0 中非零元素的比例足够小，求出1-范数的最小值就等价于求出所需的稀疏表示向量。<br>接下来，论文考虑到在实际应用中，照片可能出现细微的噪声，测试样本可能无法准确表示为训练样本的线性组合，因此加入了一个噪声因子z，来表示可以接受的噪声范围，得到方程 y=Ax_0+z 。根据 z 的范围，可以求出对应的最小1-范数，求出所需的稀疏表示。</p><p>得到了测试样本的稀疏表示后，需要一种方法来确定它所属的类别。分别只考虑稀疏表示向量中每个类别对应的系数，而令其他无关系数都为0，近似地计算出不同的估计样本 y ̂_i ，再将真实的测试样本y与估计样本 y ̂_i 相减，可以得到估计样本和真实样本之间的差距。差值最小的类别，就是最接近真实测试样本的类别，因此可以将测试样本归入这个类别中。</p><p>除了分类问题，算法还应该具有排除外来样本的能力。论文定义了 SCI ，来表示稀疏表示中非零项的集中程度。只要 SCI 小于某一给定值，则说明测试样本不属于给定的任何类别，就应该被拒绝。</p><p>人脸识别有两个需要重点解决的问题：特征提取和对遮挡、失真问题的健壮性。特征提取的目的是减少样本特征的维度，以便减少运算量，提升识别速度。论文研究发现，只要样本数量足够多，特征提取的具体方法就不能对识别结果产生明显的影响。这样就可以利用基于正态分布的随机脸（Randomfaces）来快速提取特征，降低计算量，并且保证识别的准确性。对遮挡、失真问题的健壮性，与前面提到的噪声问题类似，可以通过引入误差向量，一起参与稀疏表示的求解，从而一并将稀疏表示和误差向量算出。得到误差向量后，用测试样本减去误差来重新构建样本，再通过上面提到的分类方法和排除方法，可以对样本进行分类和排除。这种处理误差的方法同样适用于上面提到的噪声问题。</p><p>最后，论文通过综合考虑不同的人脸数据库、不同的失真和遮挡情形，进行了不同的实验，用不同情况下的识别率来说明这种SRC算法的有效性和先进性。在多种复杂情况下，SRC算法要优于传统的人脸识别方法，但在大面积遮挡的情况下，SRC算法的识别率仍然较低，需要采取分区识别等方法来进行优化。</p><p>以上是我对论文的一些基本理解。论文中的一些内容，如2.2和3.2中的一些证明过程，我还不能完全理解，仍需要继续进行相关知识的学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一周阅读了题为 &lt;a href=&quot;https://ieeexplore.ieee.org/document/4483511/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Robust Face Recognition via Sparse Repre
      
    
    </summary>
    
    
      <category term="Face-Recognition" scheme="http://xungerrrr.github.io/tags/Face-Recognition/"/>
    
      <category term="Image-Understanding" scheme="http://xungerrrr.github.io/tags/Image-Understanding/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D - 牧师与魔鬼</title>
    <link href="http://xungerrrr.github.io/2018/04/01/Unity-3D-%E7%89%A7%E5%B8%88%E4%B8%8E%E9%AD%94%E9%AC%BC/"/>
    <id>http://xungerrrr.github.io/2018/04/01/Unity-3D-牧师与魔鬼/</id>
    <published>2018-04-01T03:55:20.000Z</published>
    <updated>2018-05-16T05:20:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="游戏脚本"><a href="#游戏脚本" class="headerlink" title="游戏脚本"></a>游戏脚本</h2><blockquote><p>Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!</p></blockquote><h2 id="程序需要满足的要求"><a href="#程序需要满足的要求" class="headerlink" title="程序需要满足的要求"></a>程序需要满足的要求</h2><ul><li><a href="http://www.flash-game.net/game/2535/priests-and-devils.html" target="_blank" rel="noopener">play the game</a></li><li>列出游戏中提及的事物（Objects）</li><li>用表格列出玩家动作表（规则表），注意，动作越少越好</li><li>请将游戏中对象做成预制</li><li>在 GenGameObjects 中创建 长方形、正方形、球 及其色彩代表游戏中的对象。</li><li>使用 C# 集合类型 有效组织对象</li><li>整个游戏仅 主摄像机 和 一个 Empty 对象， <strong>其他对象必须代码动态生成！！！</strong> 。 整个游戏不许出现 Find 游戏对象， SendMessage 这类突破程序结构的 通讯耦合 语句。 <strong>违背本条准则，不给分</strong></li><li>请使用课件架构图编程，<strong>不接受非 MVC 结构程序</strong></li><li>注意细节，例如：船未靠岸，牧师与魔鬼上下船运动中，均不能接受用户事件！</li></ul><h2 id="游戏中提及的事物（Object）"><a href="#游戏中提及的事物（Object）" class="headerlink" title="游戏中提及的事物（Object）"></a>游戏中提及的事物（Object）</h2><blockquote><p>牧师、魔鬼、船、go 按钮、开始岸、结束岸、水</p></blockquote><h2 id="玩家动作表"><a href="#玩家动作表" class="headerlink" title="玩家动作表"></a>玩家动作表</h2><table><thead><tr><th style="text-align:left">动作</th><th style="text-align:left">规则</th></tr></thead><tbody><tr><td style="text-align:left">开船</td><td style="text-align:left">船停靠在岸边且船上至少有一人</td></tr><tr><td style="text-align:left">上船</td><td style="text-align:left">船停靠在岸边，船上有空位并且岸上有人</td></tr><tr><td style="text-align:left">下船</td><td style="text-align:left">船停靠在岸边且船上有人</td></tr></tbody></table><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><h3 id="MVC架构"><a href="#MVC架构" class="headerlink" title="MVC架构"></a>MVC架构</h3><ul><li>Model：游戏中的 GameObject。</li><li>View: UserGUI，ClickGUI。</li><li>Controller: SSDirector（最高级别的 Controller），FirstController，以及其他基础的 Controller (BoatController, MyCharacterController, ShoreController)。</li></ul><h3 id="游戏接口定义"><a href="#游戏接口定义" class="headerlink" title="游戏接口定义"></a>游戏接口定义</h3><p>游戏中定义了两个接口类型，分别负责游戏场景控制和用户交互。这两个接口不能直接实例化，而是要通过继承这两个接口来实现相应的功能。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">SceneController</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadResources</span> (<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pause</span> (<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resume</span> (<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUserAction</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveBoat</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">characterIsClicked</span>(<span class="params">MyCharacterController characterCtrl</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">restart</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="View-定义"><a href="#View-定义" class="headerlink" title="View 定义"></a>View 定义</h3><h4 id="ClickGUI"><a href="#ClickGUI" class="headerlink" title="ClickGUI"></a>ClickGUI</h4><p>ClickGUI 类用来监测用户的点击行为，并利用 SceneController 中的方法进行处理。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClickGUI</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    IUserAction action;</span><br><span class="line">    MyCharacterController characterController;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setController</span>(<span class="params">MyCharacterController characterCtrl</span>) </span>&#123;</span><br><span class="line">        characterController = characterCtrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        action = SSDirector.getInstance().currentSceneController <span class="keyword">as</span> IUserAction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMouseDown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SSDirector.getInstance().state == State.START) &#123;</span><br><span class="line">            <span class="keyword">if</span> (gameObject.name == <span class="string">"boat"</span>) &#123;</span><br><span class="line">            action.moveBoat ();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                action.characterIsClicked (characterController);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="UserGUI"><a href="#UserGUI" class="headerlink" title="UserGUI"></a>UserGUI</h4><p>UserGUI 类用来显示游戏中的开始/暂停按钮、游戏状态和倒计时等元素，也是用户控制游戏开始和暂停的入口。</p><p>UserGUI 类定义参见 <a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/master/Homework%202/Priests%20and%20Devils" target="_blank" rel="noopener">GitHub</a>。</p><h3 id="Controller-定义"><a href="#Controller-定义" class="headerlink" title="Controller 定义"></a>Controller 定义</h3><h4 id="SSDirector-类定义"><a href="#SSDirector-类定义" class="headerlink" title="SSDirector 类定义"></a>SSDirector 类定义</h4><p>SSDirector 类是最高层的控制器，在游戏过程中只有一个实例，控制游戏的开始、暂停以及资源的加载。其中 state 是一个自定义的枚举型变量，记录游戏的四种状态，以实现游戏的暂停功能。CountDown 方法实现了游戏的倒计时功能。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123; WIN, LOSE, PAUSE, START &#125;;</span><br><span class="line"></span><br><span class="line">public class SSDirector : System.Object &#123;</span><br><span class="line">    <span class="keyword">public</span> State state = State.PAUSE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> totalSeconds = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> leaveSeconds;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> countDownTitle = <span class="string">"Start"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SSDirector _instance;</span><br><span class="line">    <span class="keyword">public</span> SceneController currentSceneController &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSDirector <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_instance == <span class="literal">null</span>) &#123;</span><br><span class="line">        _instance = <span class="keyword">new</span> SSDirector ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFPS</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Application.targetFrameRate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFPS</span>(<span class="params"><span class="keyword">int</span> fps</span>) </span>&#123;</span><br><span class="line">        Application.targetFrameRate = fps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">CountDown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (leaveSeconds &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">1</span>f</span>)</span>;</span><br><span class="line">            leaveSeconds--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="其他-Controller-类定义"><a href="#其他-Controller-类定义" class="headerlink" title="其他 Controller 类定义"></a>其他 Controller 类定义</h4><p>其他 Controller 类定义参见 <a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/master/Homework%202/Priests%20and%20Devils" target="_blank" rel="noopener">GitHub</a>。</p><h2 id="游戏效果预览"><a href="#游戏效果预览" class="headerlink" title="游戏效果预览"></a>游戏效果预览</h2><img src="/2018/04/01/Unity-3D-牧师与魔鬼/Priests%20and%20Devils.gif" title="Priests and Devils"><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p>[1] <a href="https://www.jianshu.com/p/07028b3da573" target="_blank" rel="noopener">学习 Unity(5) 小游戏实例——牧师与魔鬼</a></p><p>[2] <a href="https://blog.csdn.net/H12590400327/article/details/70037805" target="_blank" rel="noopener">Unity3D 学习——牧师与恶魔过河游戏 (组合模式、单实例模式)</a></p><a href="/2018/03/30/Unity-3D-Learning/" title="返回 Unity 3D Learning">返回 Unity 3D Learning</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;游戏脚本&quot;&gt;&lt;a href=&quot;#游戏脚本&quot; class=&quot;headerlink&quot; title=&quot;游戏脚本&quot;&gt;&lt;/a&gt;游戏脚本&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Priests and Devils is a puzzle game in which you 
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D - 太阳系</title>
    <link href="http://xungerrrr.github.io/2018/03/31/Unity-3D-%E5%A4%AA%E9%98%B3%E7%B3%BB/"/>
    <id>http://xungerrrr.github.io/2018/03/31/Unity-3D-太阳系/</id>
    <published>2018-03-31T09:41:38.000Z</published>
    <updated>2018-04-10T13:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="游戏对象运动的本质是什么"><a href="#游戏对象运动的本质是什么" class="headerlink" title="游戏对象运动的本质是什么?"></a>游戏对象运动的本质是什么?</h2><blockquote><p>游戏对象的运动，是由游戏对象空间位置的连续变化所形成的。其中，游戏对象的空间位置由游戏中的坐标系统所决定，包含位置、旋转角度和缩放比例等属性。</p></blockquote><h2 id="请用三种方法以上方法，实现物体的抛物线运动。"><a href="#请用三种方法以上方法，实现物体的抛物线运动。" class="headerlink" title="请用三种方法以上方法，实现物体的抛物线运动。"></a>请用三种方法以上方法，实现物体的抛物线运动。</h2><blockquote><p>抛体运动的特点</p><ul><li>水平方向：匀速直线运动</li><li>竖直方向：自由落体运动（匀变速直线运动）</li></ul></blockquote><h3 id="方法1：修改-transform-属性"><a href="#方法1：修改-transform-属性" class="headerlink" title="方法1：修改 transform 属性"></a>方法1：修改 transform 属性</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> HorizontalSpeed = <span class="number">1.0</span>f; <span class="comment">// 水平初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> VerticalSpeed = <span class="number">1.0</span>f; <span class="comment">// 垂直初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> Acceleration = <span class="number">1.0</span>f; <span class="comment">// 抛体运动加速度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 更新垂直速度</span></span><br><span class="line">    VerticalSpeed -= Acceleration * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 更新水平位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.position += Vector3.left * HorizontalSpeed * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 更新垂直位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.position += Vector3.up * VerticalSpeed * Time.deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法2：使用-transform-Translate-方法"><a href="#方法2：使用-transform-Translate-方法" class="headerlink" title="方法2：使用 transform.Translate 方法"></a>方法2：使用 transform.Translate 方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> HorizontalSpeed = <span class="number">1.0</span>f; <span class="comment">// 水平初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> VerticalSpeed = <span class="number">1.0</span>f; <span class="comment">// 垂直初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> Acceleration = <span class="number">1.0</span>f; <span class="comment">// 抛体运动加速度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 更新垂直速度</span></span><br><span class="line">    VerticalSpeed -= Acceleration * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 更新水平位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.Translate (Vector3.left * HorizontalSpeed * Time.deltaTime);</span><br><span class="line">    <span class="comment">// 更新垂直位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.Translate (Vector3.up * VerticalSpeed * Time.deltaTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法3：使用-Vector3-MoveTowards-方法"><a href="#方法3：使用-Vector3-MoveTowards-方法" class="headerlink" title="方法3：使用 Vector3.MoveTowards 方法"></a>方法3：使用 Vector3.MoveTowards 方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> HorizontalSpeed = <span class="number">1.0</span>f; <span class="comment">// 水平初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> VerticalSpeed = <span class="number">1.0</span>f; <span class="comment">// 垂直初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> Acceleration = <span class="number">1.0</span>f; <span class="comment">// 抛体运动加速度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 更新垂直速度</span></span><br><span class="line">    VerticalSpeed -= Acceleration * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 计算下一位置</span></span><br><span class="line">    Vector3 NextPosition = <span class="keyword">this</span>.transform.position + Vector3.left * HorizontalSpeed * Time.deltaTime;</span><br><span class="line">    NextPosition += Vector3.up * VerticalSpeed * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 移动到下一位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.position = Vector3.MoveTowards (<span class="keyword">this</span>.transform.position, NextPosition, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法4：添加-Rigidbody-组件"><a href="#方法4：添加-Rigidbody-组件" class="headerlink" title="方法4：添加 Rigidbody 组件"></a>方法4：添加 Rigidbody 组件</h3><p>添加 Rigidbody 组件后，勾选 Use Gravity 属性，游戏对象便能受到重力作用。此时额外增加一个水平速度，即可实现游戏对象的平抛运动。<br><img src="/2018/03/31/Unity-3D-太阳系/Rigidbody.png" title="Rigidbody"><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> speed = <span class="number">1.0</span>f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 水平方向匀速运动</span></span><br><span class="line">    <span class="keyword">this</span>.transform.position += Vector3.left * speed * Time.deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="写一个程序，实现一个完整的太阳系，-其他星球围绕太阳的转速必须不一样，且不在一个法平面上。"><a href="#写一个程序，实现一个完整的太阳系，-其他星球围绕太阳的转速必须不一样，且不在一个法平面上。" class="headerlink" title="写一个程序，实现一个完整的太阳系， 其他星球围绕太阳的转速必须不一样，且不在一个法平面上。"></a>写一个程序，实现一个完整的太阳系， 其他星球围绕太阳的转速必须不一样，且不在一个法平面上。</h2><h3 id="游戏对象的层次结构"><a href="#游戏对象的层次结构" class="headerlink" title="游戏对象的层次结构"></a>游戏对象的层次结构</h3><img src="/2018/03/31/Unity-3D-太阳系/Hierarchy.png" title="Hierarchy"><p>八大行星围绕太阳公转，因此应该设计为太阳的子对象。而月球的轨迹只与地球公转相关，与地球自转无关，因此不能将月球直接设为地球的子对象。解决办法是，新建一个空对象 EarthShadow，使它的位置与地球保持一致，再将月球设为 EarthShadow 的子对象，通过控制 EarthShadow 的自转速度来控制月球绕地球的公转速度。</p><h3 id="游戏对象初始位置的确定"><a href="#游戏对象初始位置的确定" class="headerlink" title="游戏对象初始位置的确定"></a>游戏对象初始位置的确定</h3><p>创建 RoundSun 脚本，新建不同游戏对象的 Transform 属性，并根据八大行星位置的相对关系，在 Start 函数中给 Transform 属性赋值。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RoundSun</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建太阳和各行星的位置属性</span></span><br><span class="line">    <span class="keyword">public</span> Transform Mercury;</span><br><span class="line">    <span class="keyword">public</span> Transform Venus;</span><br><span class="line">    <span class="keyword">public</span> Transform Earth;</span><br><span class="line">    <span class="keyword">public</span> Transform Mars;</span><br><span class="line">    <span class="keyword">public</span> Transform Jupiter;</span><br><span class="line">    <span class="keyword">public</span> Transform Saturn;</span><br><span class="line">    <span class="keyword">public</span> Transform Uranus;</span><br><span class="line">    <span class="keyword">public</span> Transform Neptune;</span><br><span class="line">    <span class="keyword">public</span> Transform EarthShadow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化太阳和各行星的位置</span></span><br><span class="line">        Sun.position = Vector3.zero;</span><br><span class="line">        Mercury.position = <span class="keyword">new</span> Vector3 (<span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Earth.position = <span class="keyword">new</span> Vector3 (<span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Mars.position = <span class="keyword">new</span> Vector3 (<span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Jupiter.position = <span class="keyword">new</span> Vector3 (<span class="number">20</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Saturn.position = <span class="keyword">new</span> Vector3 (<span class="number">28</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Uranus.position = <span class="keyword">new</span> Vector3 (<span class="number">35</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Neptune.position = <span class="keyword">new</span> Vector3 (<span class="number">40</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        EarthShadow.position = <span class="keyword">new</span> Vector3 (<span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="公转和自转"><a href="#公转和自转" class="headerlink" title="公转和自转"></a>公转和自转</h3><p>接下来，在 Update 函数中用 RotateAround 方法实现行星的公转，用 Rotate 实现行星的自转。根据太阳系相关数据设定参数。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RoundSun</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 公转</span></span><br><span class="line">        Mercury.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>), <span class="number">47</span> * Time.deltaTime)；</span><br><span class="line">        Venus.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">15</span>, <span class="number">-1</span>), <span class="number">35</span> * Time.deltaTime);</span><br><span class="line">        Earth.RotateAround (Sun.position, Vector3.up, <span class="number">30</span> * Time.deltaTime);</span><br><span class="line">        Mars.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">18</span>, <span class="number">2</span>), <span class="number">24</span> * Time.deltaTime);</span><br><span class="line">        Jupiter.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">16</span>, <span class="number">1</span>), <span class="number">13</span> * Time.deltaTime);</span><br><span class="line">        Saturn.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">20</span>, <span class="number">-1</span>), <span class="number">9</span> * Time.deltaTime);</span><br><span class="line">        Uranus.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">25</span>, <span class="number">-1</span>), <span class="number">6</span> * Time.deltaTime);</span><br><span class="line">        Neptune.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">30</span>, <span class="number">1</span>), <span class="number">5</span> * Time.deltaTime);</span><br><span class="line">        EarthShadow.RotateAround (Sun.position, Vector3.up, <span class="number">30</span> * Time.deltaTime);</span><br><span class="line">        <span class="comment">// 自转</span></span><br><span class="line">        Mercury.Rotate (Vector3.down * <span class="number">6</span> * Time.deltaTime);</span><br><span class="line">        Venus.Rotate (Vector3.down * <span class="number">1</span> * Time.deltaTime);</span><br><span class="line">        Earth.Rotate (Vector3.down * <span class="number">300</span> * Time.deltaTime);</span><br><span class="line">        Mars.Rotate (Vector3.up * <span class="number">300</span> * Time.deltaTime);</span><br><span class="line">        Jupiter.Rotate (Vector3.up * <span class="number">600</span> * Time.deltaTime);</span><br><span class="line">        Saturn.Rotate (Vector3.up * <span class="number">400</span> * Time.deltaTime);</span><br><span class="line">        Uranus.Rotate (Vector3.up * <span class="number">500</span> * Time.deltaTime);</span><br><span class="line">        Neptune.Rotate (Vector3.up * <span class="number">500</span> * Time.deltaTime);</span><br><span class="line">        EarthShadow.Rotate (Vector3.down * <span class="number">100</span> * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>最后，将脚本挂在 MainCamera 上，将游戏对象拖入到相应的 Transform 属性中，并将图片素材拖放到行星上。运行效果如下：<br><img src="/2018/03/31/Unity-3D-太阳系/Solar-System1.png" title="Solar System1"><br><img src="/2018/03/31/Unity-3D-太阳系/Solar-System2.png" title="Solar System2"><br><img src="/2018/03/31/Unity-3D-太阳系/Solar%20System.gif" title="Solar System"></p><p><a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/master/Homework%202/1.%20Solar%20System" target="_blank" rel="noopener">GitHub 源码</a></p><a href="/2018/03/30/Unity-3D-Learning/" title="返回 Unity 3D Learning">返回 Unity 3D Learning</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;游戏对象运动的本质是什么&quot;&gt;&lt;a href=&quot;#游戏对象运动的本质是什么&quot; class=&quot;headerlink&quot; title=&quot;游戏对象运动的本质是什么?&quot;&gt;&lt;/a&gt;游戏对象运动的本质是什么?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;游戏对象的运动，是由游戏对象空
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D - 基础概念</title>
    <link href="http://xungerrrr.github.io/2018/03/31/Unity-3D-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>http://xungerrrr.github.io/2018/03/31/Unity-3D-基础概念/</id>
    <published>2018-03-31T04:24:38.000Z</published>
    <updated>2018-04-10T13:04:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释-游戏对象（GameObjects）-和-资源（Assets）的区别与联系。"><a href="#解释-游戏对象（GameObjects）-和-资源（Assets）的区别与联系。" class="headerlink" title="解释 游戏对象（GameObjects） 和 资源（Assets）的区别与联系。"></a>解释 游戏对象（GameObjects） 和 资源（Assets）的区别与联系。</h2><ul><li><p>区别</p><ul><li><p>游戏对象（GameObjects）</p><blockquote><p>游戏中的物体就是游戏对象，例如游戏中的角色、道具和环境物体。游戏对象都是由空对象构建而成的。通过向空对象中加入不同的属性（组件），我们可以获得具有不同外观和行为的游戏对象。</p></blockquote></li><li><p>资源（Assets）</p><blockquote><p>游戏开发过程中需要的资源包括材质、纹理、模型、动画、预设、音频、场景等，是能应用在游戏中的素材。</p></blockquote></li></ul></li><li><p>联系</p><blockquote><p>资源能够被导入到游戏中，被游戏对象使用，影响游戏对象的属性。资源还可以被用来创建新的游戏对象。</p></blockquote></li></ul><h2 id="下载几个游戏案例，分别总结资源、对象组织的结构（指资源的目录组织结构与游戏对象树的层次结构）"><a href="#下载几个游戏案例，分别总结资源、对象组织的结构（指资源的目录组织结构与游戏对象树的层次结构）" class="headerlink" title="下载几个游戏案例，分别总结资源、对象组织的结构（指资源的目录组织结构与游戏对象树的层次结构）"></a>下载几个游戏案例，分别总结资源、对象组织的结构（指资源的目录组织结构与游戏对象树的层次结构）</h2><p>Unity 官方教程的资源目录组织和游戏对象树如下：</p><img src="/2018/03/31/Unity-3D-基础概念/file-tree.png" title="file-tree"><p>游戏资源被放到不同的层级中，层次和内容十分清晰。游戏对象间也有明确的层级关系，以便实现游戏中的组合模式。</p><h2 id="编写一个代码，使用-debug-语句来验证-MonoBehaviour-基本行为或事件触发的条件"><a href="#编写一个代码，使用-debug-语句来验证-MonoBehaviour-基本行为或事件触发的条件" class="headerlink" title="编写一个代码，使用 debug 语句来验证 MonoBehaviour 基本行为或事件触发的条件"></a>编写一个代码，使用 debug 语句来验证 <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.html" target="_blank" rel="noopener">MonoBehaviour</a> 基本行为或事件触发的条件</h2><ul><li>基本行为包括 Awake() Start() Update() FixedUpdate() LateUpdate()</li><li>常用事件包括 OnGUI() OnDisable() OnEnable()</li></ul><p>代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C# Script</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NewBehaviourScript</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否执行过相应函数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">bool</span> isUpdate = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">bool</span> isFixedUpdate = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">bool</span> isLateUpdate = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">bool</span> isOnGUI = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当一个脚本实例被载入时 Awake 被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Awake</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Debug.Log (<span class="string">"Awake"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Start 仅在 Update 函数第一次被调用前调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Debug.Log (<span class="string">"Start"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当 MonoBehaviour 启用时，其 Update 在每一帧被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 确保函数只被执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (!isUpdate) &#123;</span><br><span class="line">      Debug.Log (<span class="string">"Update"</span>);</span><br><span class="line">      isUpdate = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当 MonoBehaviour 启用时，其 FixedUpdate 在每一帧被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 确保函数只被执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (!isFixedUpdate) &#123;</span><br><span class="line">      Debug.Log (<span class="string">"Fixed Update"</span>);</span><br><span class="line">      isFixedUpdate = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当 Behaviour 启用时，其 LateUpdate 在每一帧被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">LateUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 确保函数只被执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (!isLateUpdate) &#123;</span><br><span class="line">      Debug.Log (<span class="string">"Late Update"</span>);</span><br><span class="line">      isLateUpdate = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当对象变为不可用或非激活状态时此函数被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Debug.Log (<span class="string">"On Disable"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当对象变为可用或激活状态时此函数被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Debug.Log (<span class="string">"On Enable"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染和处理 GUI 事件时调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 确保函数只被执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (!isOnGUI) &#123;</span><br><span class="line">      Debug.Log (<span class="string">"On GUI"</span>);</span><br><span class="line">      isOnGUI = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下图：</p><img src="/2018/03/31/Unity-3D-基础概念/console.png" title="console"><p>可以看出，基本行为和事件的发生顺序为：</p><ol><li>Awake()</li><li>OnEnable()</li><li>Start()</li><li>FixedUpdate()</li><li>Update()</li><li>LateUpdate()</li><li>OnGUI()</li><li>OnDisable()</li></ol><p>顺序满足各事件触发的条件。</p><p>FixedUpdate()、LateUpdate()和Update()的区别：</p><ul><li><p>FixedUpdate()</p><blockquote><p>处理 Rigidbody 时，需要用 FixedUpdate 代替 Update。例如: 给刚体加一个作用力时，你必须应用作用力在 FixedUpdate 里的固定帧，而不是 Update 中的帧(两者帧长不同)。</p></blockquote></li><li><p>LateUpdate()</p><blockquote><p>LateUpdate 是在所有 Update 函数调用后被调用。这可用于调整脚本执行顺序。例如: 当物体在 Update 里移动时，跟随物体的相机可以在 LateUpdate 里实现。</p></blockquote></li></ul><h2 id="查找脚本手册，了解-GameObject，Transform，Component-对象"><a href="#查找脚本手册，了解-GameObject，Transform，Component-对象" class="headerlink" title="查找脚本手册，了解 GameObject，Transform，Component 对象"></a>查找脚本手册，了解 <a href="https://docs.unity3d.com/ScriptReference/GameObject.html" target="_blank" rel="noopener">GameObject</a>，Transform，Component 对象</h2><ul><li><p>分别翻译官方对三个对象的描述（Description）</p><ul><li><p>GameObject</p><blockquote><p>GameObjects are the fundamental objects in Unity that represent characters, props and scenery.</p></blockquote><blockquote><p>游戏对象是Unity中基础的对象，它代表了角色、道具和场景。</p></blockquote></li><li><p>Transform</p><blockquote><p>The Transform component determines the Position, Rotation, and Scale of each object in the scene.</p></blockquote><blockquote><p>变换组件决定了场景中每个对象的位置、旋转角度和缩放比例。</p></blockquote></li><li><p>Component</p><blockquote><p>Components are the nuts &amp; bolts of objects and behaviors in a game.</p></blockquote><blockquote><p>组件是游戏中对象和行为的枢纽。</p></blockquote></li></ul></li><li><p>描述下图中 table 对象（实体）的属性、table 的 Transform 的属性、 table 的部件</p><img src="/2018/03/31/Unity-3D-基础概念/ch02-homework.png" title="pic"><ul><li>table 对象（实体）的属性<ul><li>Name: 对象的名字</li><li>Tag: 用于通过 Tag 名称来快速查找对象</li><li>Layer: 可用于仅对某些特定的对象组投射光线、渲染或应用光照</li><li>Static: 准备静态几何结构以用于自动批处理；计算遮挡剔除 (Occlusion Culling)</li></ul></li><li>table 的 Transform 的属性<ul><li>Position: X、Y 和 Z 坐标中变换的位置。(0, 0, 0)</li><li>Rotation: 围绕 X、Y 和 Z 轴的旋转，以度计。(0, 0, 0)</li><li>Scale: 沿 X、Y 和 Z 轴的缩放，“1” 是原始大小。(1, 1, 1)</li></ul></li><li>table 的部件<ul><li>Cube (Mesh Filter): 网格过滤器从资源中拿出网格并将其传递给网格渲染器 (Mesh Renderer) 用于屏幕渲染</li><li>Box Collider: 箱体碰撞体 (Box Collider) 是基本立方体形碰撞基元</li><li>Mesh Renderer: 网格渲染器 (Mesh Renderer) 从网格过滤器 （Mesh Filter) 获得几何结构，并根据物体的变换组件 (Transform) 定义的位置进行渲染</li><li>Material: 材质用于将纹理置于游戏对象 (GameObject) 上</li></ul></li></ul></li><li><p>用 UML 图描述 三者的关系（请使用 UMLet 14.1.1 stand-alone版本出图）</p><img src="/2018/03/31/Unity-3D-基础概念/relation.png" title="relation"></li></ul><h2 id="整理相关学习资料，编写简单代码验证以下技术的实现："><a href="#整理相关学习资料，编写简单代码验证以下技术的实现：" class="headerlink" title="整理相关学习资料，编写简单代码验证以下技术的实现："></a>整理相关学习资料，编写简单代码验证以下技术的实现：</h2><ul><li><p>查找对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过名字查找：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">Find</span>(<span class="params"><span class="keyword">string</span> name</span>)</span>;</span><br><span class="line"><span class="comment">//通过标签查找单个对象：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">FindWithTag</span>(<span class="params"><span class="keyword">string</span> tag</span>)</span>;</span><br><span class="line"><span class="comment">//通过标签查找多个对象：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject[] <span class="title">FindGameObjectsWithTag</span>(<span class="params"><span class="keyword">string</span> tag</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>添加子对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">CreatePrimitive</span>(<span class="params">PrimitiveTypetype</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>遍历对象树</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (Transform child <span class="keyword">in</span> transform) &#123;</span><br><span class="line">  Debug.Log(child.gameObject.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>清除所有子对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (Transform child <span class="keyword">in</span> transform) &#123;  </span><br><span class="line">  Destroy(child.gameObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="资源预设（Prefabs）与-对象克隆-clone"><a href="#资源预设（Prefabs）与-对象克隆-clone" class="headerlink" title="资源预设（Prefabs）与 对象克隆 (clone)"></a>资源预设（Prefabs）与 对象克隆 (clone)</h2><ul><li><p>预设（Prefabs）有什么好处？</p><blockquote><p>预设就是预制好的游戏对象，包含了完整的组件和属性，可看作是游戏对象的模板。利用预制能够批量实例化出具有相同属性的游戏对象。预设与实例之间是联系的，改变预设的属性能够更改所有与之关联的对象的属性。</p></blockquote></li><li><p>预设与对象克隆 (clone or copy or Instantiate of Unity Object) 关系？</p><blockquote><p>不同于预设，对象克隆只是对对象的复制，新对象与克隆本体之间没有关联，不会相互影响。</p></blockquote></li><li><p>制作 table 预制，写一段代码将 table 预制资源实例化成游戏对象</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C# Script</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> UnityEngine;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Instantiate</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> GameObject table;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> columnNum = <span class="number">10</span>; <span class="comment">// 列数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> rowNum = <span class="number">5</span>; <span class="comment">// 行数</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowNum; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columnNum; j++) &#123;</span><br><span class="line">        <span class="comment">// 创建 table 的实例  </span></span><br><span class="line">        Instantiate(table, <span class="keyword">new</span> Vector3(j, i, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图如下：</p>  <img src="/2018/03/31/Unity-3D-基础概念/prefabs.png" title="prefabs"><h2 id="尝试解释组合模式（Composite-Pattern-一种设计模式）。使用-BroadcastMessage-方法向子对象发送消息"><a href="#尝试解释组合模式（Composite-Pattern-一种设计模式）。使用-BroadcastMessage-方法向子对象发送消息" class="headerlink" title="尝试解释组合模式（Composite Pattern / 一种设计模式）。使用 BroadcastMessage() 方法向子对象发送消息"></a>尝试解释组合模式（Composite Pattern / 一种设计模式）。使用 BroadcastMessage() 方法向子对象发送消息</h2><blockquote><p>组合模式将对象组合成树形结构，以表示 “部分整体” 的层次结构。这种模式使得用户能够以一致的方式处理单个对象及对象的组合。</p></blockquote><p>父类对象方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.BroadcastMessage (<span class="string">"CallChildren"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类对象方法：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallChildren</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Debug.Log (<span class="string">"I'm here!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a href="/2018/03/30/Unity-3D-Learning/" title="返回 Unity 3D Learning">返回 Unity 3D Learning</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;解释-游戏对象（GameObjects）-和-资源（Assets）的区别与联系。&quot;&gt;&lt;a href=&quot;#解释-游戏对象（GameObjects）-和-资源（Assets）的区别与联系。&quot; class=&quot;headerlink&quot; title=&quot;解释 游戏对象（Game
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D Learning</title>
    <link href="http://xungerrrr.github.io/2018/03/30/Unity-3D-Learning/"/>
    <id>http://xungerrrr.github.io/2018/03/30/Unity-3D-Learning/</id>
    <published>2018-03-30T13:42:17.000Z</published>
    <updated>2018-05-11T09:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unity-3D编程-学习博客"><a href="#Unity-3D编程-学习博客" class="headerlink" title="Unity 3D编程 学习博客"></a>Unity 3D编程 学习博客</h1><blockquote><p>这是中山大学2018春季学期「3D 游戏编程与设计」的课程博客。以此系列博客记录本人3D编程学习的过程和结果。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="Homework-1"><a href="#Homework-1" class="headerlink" title="Homework 1"></a>Homework 1</h3><ul><li><a href="/2018/03/31/Unity-3D-基础概念/" title="Unity 3D - 基础概念">Unity 3D - 基础概念</a></li><li><a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/master/Homework%201/2.%20Tic-Tac-Toe" target="_blank" rel="noopener">Unity 3D - 井字棋</a></li></ul><h3 id="Homework-2"><a href="#Homework-2" class="headerlink" title="Homework 2"></a>Homework 2</h3><ul><li><a href="/2018/03/31/Unity-3D-太阳系/" title="Unity 3D - 太阳系">Unity 3D - 太阳系</a></li><li><a href="/2018/04/01/Unity-3D-牧师与魔鬼/" title="Unity 3D - 牧师与魔鬼">Unity 3D - 牧师与魔鬼</a></li></ul><h3 id="Homework-3"><a href="#Homework-3" class="headerlink" title="Homework 3"></a>Homework 3</h3><ul><li><a href="/2018/04/10/Unity-3D-牧师与魔鬼-2-0/" title="Unity 3D - 牧师与魔鬼 2.0">Unity 3D - 牧师与魔鬼 2.0</a></li></ul><h3 id="Homework-4"><a href="#Homework-4" class="headerlink" title="Homework 4"></a>Homework 4</h3><ul><li><a href="/2018/04/17/Unity-3D-Hit-UFO/" title="Unity 3D - Hit UFO">Unity 3D - Hit UFO</a></li></ul><h3 id="Homework-5"><a href="#Homework-5" class="headerlink" title="Homework 5"></a>Homework 5</h3><ul><li><a href="/2018/04/24/Unity-3D-Hit-UFO-2-0/" title="Unity 3D - Hit UFO 2.0">Unity 3D - Hit UFO 2.0</a></li></ul><h3 id="Homework-6"><a href="#Homework-6" class="headerlink" title="Homework 6"></a>Homework 6</h3><ul><li><a href="/2018/05/11/Unity-3D-智能巡逻兵/" title="Unity 3D - 智能巡逻兵">Unity 3D - 智能巡逻兵</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Unity-3D编程-学习博客&quot;&gt;&lt;a href=&quot;#Unity-3D编程-学习博客&quot; class=&quot;headerlink&quot; title=&quot;Unity 3D编程 学习博客&quot;&gt;&lt;/a&gt;Unity 3D编程 学习博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是中山大
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xungerrrr.github.io/2018/03/30/hello-world/"/>
    <id>http://xungerrrr.github.io/2018/03/30/hello-world/</id>
    <published>2018-03-30T12:00:00.000Z</published>
    <updated>2018-03-31T07:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="blog" scheme="http://xungerrrr.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
