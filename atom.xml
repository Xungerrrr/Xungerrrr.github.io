<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xungerrrr&#39;s Site</title>
  
  <subtitle>Every Little Counts.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xungerrrr.github.io/"/>
  <updated>2018-04-01T14:06:39.230Z</updated>
  <id>http://xungerrrr.github.io/</id>
  
  <author>
    <name>Xunyan Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity 3D - 牧师与魔鬼</title>
    <link href="http://xungerrrr.github.io/2018/04/01/Unity-3D-%E7%89%A7%E5%B8%88%E4%B8%8E%E9%AD%94%E9%AC%BC/"/>
    <id>http://xungerrrr.github.io/2018/04/01/Unity-3D-牧师与魔鬼/</id>
    <published>2018-04-01T03:55:20.000Z</published>
    <updated>2018-04-01T14:06:39.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="游戏脚本"><a href="#游戏脚本" class="headerlink" title="游戏脚本"></a>游戏脚本</h2><blockquote><p>Priests and Devils</p><p>Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!</p></blockquote><h2 id="程序需要满足的要求"><a href="#程序需要满足的要求" class="headerlink" title="程序需要满足的要求"></a>程序需要满足的要求</h2><ul><li>play the game ( <a href="http://www.flash-game.net/game/2535/priests-and-devils.html" target="_blank" rel="noopener">http://www.flash-game.net/game/2535/priests-and-devils.html</a> )</li><li>列出游戏中提及的事物（Objects）</li><li>用表格列出玩家动作表（规则表），注意，动作越少越好</li><li>请将游戏中对象做成预制</li><li>在 GenGameObjects 中创建 长方形、正方形、球 及其色彩代表游戏中的对象。</li><li>使用 C# 集合类型 有效组织对象</li><li>整个游戏仅 主摄像机 和 一个 Empty 对象， <strong>其他对象必须代码动态生成！！！</strong> 。 整个游戏不许出现 Find 游戏对象， SendMessage 这类突破程序结构的 通讯耦合 语句。 <strong>违背本条准则，不给分</strong></li><li>请使用课件架构图编程，<strong>不接受非 MVC 结构程序</strong></li><li>注意细节，例如：船未靠岸，牧师与魔鬼上下船运动中，均不能接受用户事件！</li></ul><h2 id="游戏中提及的事物（Object）"><a href="#游戏中提及的事物（Object）" class="headerlink" title="游戏中提及的事物（Object）"></a>游戏中提及的事物（Object）</h2><blockquote><p>牧师、魔鬼、船、go 按钮、开始岸、结束岸</p></blockquote><h2 id="玩家动作表"><a href="#玩家动作表" class="headerlink" title="玩家动作表"></a>玩家动作表</h2><table><thead><tr><th style="text-align:left">动作</th><th style="text-align:left">规则</th></tr></thead><tbody><tr><td style="text-align:left">开船</td><td style="text-align:left">船停靠在岸边且船上至少有一人</td></tr><tr><td style="text-align:left">上船</td><td style="text-align:left">船停靠在岸边，船上有空位并且岸上有人</td></tr><tr><td style="text-align:left">下船</td><td style="text-align:left">船停靠在岸边且船上有人</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;游戏脚本&quot;&gt;&lt;a href=&quot;#游戏脚本&quot; class=&quot;headerlink&quot; title=&quot;游戏脚本&quot;&gt;&lt;/a&gt;游戏脚本&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Priests and Devils&lt;/p&gt;
&lt;p&gt;Priests and Devils is a
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D - 太阳系</title>
    <link href="http://xungerrrr.github.io/2018/03/31/Unity-3D-%E5%A4%AA%E9%98%B3%E7%B3%BB/"/>
    <id>http://xungerrrr.github.io/2018/03/31/Unity-3D-太阳系/</id>
    <published>2018-03-31T09:41:38.000Z</published>
    <updated>2018-04-01T14:05:02.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="游戏对象运动的本质是什么"><a href="#游戏对象运动的本质是什么" class="headerlink" title="游戏对象运动的本质是什么?"></a>游戏对象运动的本质是什么?</h2><blockquote><p>游戏对象的运动，是由游戏对象空间位置的连续变化所形成的。其中，游戏对象的空间位置由游戏中的坐标系统所决定，包含位置、旋转角度和缩放比例等属性。</p></blockquote><h2 id="请用三种方法以上方法，实现物体的抛物线运动。"><a href="#请用三种方法以上方法，实现物体的抛物线运动。" class="headerlink" title="请用三种方法以上方法，实现物体的抛物线运动。"></a>请用三种方法以上方法，实现物体的抛物线运动。</h2><blockquote><p>抛体运动的特点</p><ul><li>水平方向：匀速直线运动</li><li>竖直方向：自由落体运动（匀变速直线运动）</li></ul></blockquote><h3 id="方法1：修改-transform-属性"><a href="#方法1：修改-transform-属性" class="headerlink" title="方法1：修改 transform 属性"></a>方法1：修改 transform 属性</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> HorizontalSpeed = <span class="number">1.0</span>f; <span class="comment">// 水平初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> VerticalSpeed = <span class="number">1.0</span>f; <span class="comment">// 垂直初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> Acceleration = <span class="number">1.0</span>f; <span class="comment">// 抛体运动加速度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 更新垂直速度</span></span><br><span class="line">    VerticalSpeed -= Acceleration * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 更新水平位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.position += Vector3.left * HorizontalSpeed * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 更新垂直位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.position += Vector3.up * VerticalSpeed * Time.deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法2：使用-transform-Translate-方法"><a href="#方法2：使用-transform-Translate-方法" class="headerlink" title="方法2：使用 transform.Translate 方法"></a>方法2：使用 transform.Translate 方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> HorizontalSpeed = <span class="number">1.0</span>f; <span class="comment">// 水平初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> VerticalSpeed = <span class="number">1.0</span>f; <span class="comment">// 垂直初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> Acceleration = <span class="number">1.0</span>f; <span class="comment">// 抛体运动加速度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 更新垂直速度</span></span><br><span class="line">    VerticalSpeed -= Acceleration * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 更新水平位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.Translate (Vector3.left * HorizontalSpeed * Time.deltaTime);</span><br><span class="line">    <span class="comment">// 更新垂直位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.Translate (Vector3.up * VerticalSpeed * Time.deltaTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法3：使用-Vector3-MoveTowards-方法"><a href="#方法3：使用-Vector3-MoveTowards-方法" class="headerlink" title="方法3：使用 Vector3.MoveTowards 方法"></a>方法3：使用 Vector3.MoveTowards 方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> HorizontalSpeed = <span class="number">1.0</span>f; <span class="comment">// 水平初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> VerticalSpeed = <span class="number">1.0</span>f; <span class="comment">// 垂直初速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> Acceleration = <span class="number">1.0</span>f; <span class="comment">// 抛体运动加速度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 更新垂直速度</span></span><br><span class="line">    VerticalSpeed -= Acceleration * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 计算下一位置</span></span><br><span class="line">    Vector3 NextPosition = <span class="keyword">this</span>.transform.position + Vector3.left * HorizontalSpeed * Time.deltaTime;</span><br><span class="line">    NextPosition += Vector3.up * VerticalSpeed * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 移动到下一位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.position = Vector3.MoveTowards (<span class="keyword">this</span>.transform.position, NextPosition, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法4：添加-Rigidbody-组件"><a href="#方法4：添加-Rigidbody-组件" class="headerlink" title="方法4：添加 Rigidbody 组件"></a>方法4：添加 Rigidbody 组件</h3><p>添加 Rigidbody 组件后，勾选 Use Gravity 属性，游戏对象便能受到重力作用。此时额外增加一个水平速度，即可实现游戏对象的平抛运动。<br><img src="/2018/03/31/Unity-3D-太阳系/Rigidbody.png" title="Rigidbody"><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> speed = <span class="number">1.0</span>f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 水平方向匀速运动</span></span><br><span class="line">    <span class="keyword">this</span>.transform.position += Vector3.left * speed * Time.deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="写一个程序，实现一个完整的太阳系，-其他星球围绕太阳的转速必须不一样，且不在一个法平面上。"><a href="#写一个程序，实现一个完整的太阳系，-其他星球围绕太阳的转速必须不一样，且不在一个法平面上。" class="headerlink" title="写一个程序，实现一个完整的太阳系， 其他星球围绕太阳的转速必须不一样，且不在一个法平面上。"></a>写一个程序，实现一个完整的太阳系， 其他星球围绕太阳的转速必须不一样，且不在一个法平面上。</h2><h3 id="游戏对象的层次结构"><a href="#游戏对象的层次结构" class="headerlink" title="游戏对象的层次结构"></a>游戏对象的层次结构</h3><img src="/2018/03/31/Unity-3D-太阳系/Hierarchy.png" title="Hierarchy"><p>八大行星围绕太阳公转，因此应该设计为太阳的子对象。而月球的轨迹只与地球公转相关，与地球自转无关，因此不能将月球直接设为地球的子对象。解决办法是，新建一个空对象 EarthShadow，使它的位置与地球保持一致，再将月球设为 EarthShadow 的子对象，通过控制 EarthShadow 的自转速度来控制月球绕地球的公转速度。</p><h3 id="游戏对象初始位置的确定"><a href="#游戏对象初始位置的确定" class="headerlink" title="游戏对象初始位置的确定"></a>游戏对象初始位置的确定</h3><p>创建 RoundSun 脚本，新建不同游戏对象的 Transform 属性，并根据八大行星位置的相对关系，在 Start 函数中给 Transform 属性赋值。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RoundSun</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建太阳和各行星的位置属性</span></span><br><span class="line">    <span class="keyword">public</span> Transform Mercury;</span><br><span class="line">    <span class="keyword">public</span> Transform Venus;</span><br><span class="line">    <span class="keyword">public</span> Transform Earth;</span><br><span class="line">    <span class="keyword">public</span> Transform Mars;</span><br><span class="line">    <span class="keyword">public</span> Transform Jupiter;</span><br><span class="line">    <span class="keyword">public</span> Transform Saturn;</span><br><span class="line">    <span class="keyword">public</span> Transform Uranus;</span><br><span class="line">    <span class="keyword">public</span> Transform Neptune;</span><br><span class="line">    <span class="keyword">public</span> Transform EarthShadow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化太阳和各行星的位置</span></span><br><span class="line">        Sun.position = Vector3.zero;</span><br><span class="line">        Mercury.position = <span class="keyword">new</span> Vector3 (<span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Earth.position = <span class="keyword">new</span> Vector3 (<span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Mars.position = <span class="keyword">new</span> Vector3 (<span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Jupiter.position = <span class="keyword">new</span> Vector3 (<span class="number">20</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Saturn.position = <span class="keyword">new</span> Vector3 (<span class="number">28</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Uranus.position = <span class="keyword">new</span> Vector3 (<span class="number">35</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Neptune.position = <span class="keyword">new</span> Vector3 (<span class="number">40</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        EarthShadow.position = <span class="keyword">new</span> Vector3 (<span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="公转和自转"><a href="#公转和自转" class="headerlink" title="公转和自转"></a>公转和自转</h3><p>接下来，在 Update 函数中用 RotateAround 方法实现行星的公转，用 Rotate 实现行星的自转。根据太阳系相关数据设定参数。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RoundSun</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 公转</span></span><br><span class="line">        Mercury.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>), <span class="number">47</span> * Time.deltaTime)；</span><br><span class="line">        Venus.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">15</span>, <span class="number">-1</span>), <span class="number">35</span> * Time.deltaTime);</span><br><span class="line">        Earth.RotateAround (Sun.position, Vector3.up, <span class="number">30</span> * Time.deltaTime);</span><br><span class="line">        Mars.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">18</span>, <span class="number">2</span>), <span class="number">24</span> * Time.deltaTime);</span><br><span class="line">        Jupiter.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">16</span>, <span class="number">1</span>), <span class="number">13</span> * Time.deltaTime);</span><br><span class="line">        Saturn.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">20</span>, <span class="number">-1</span>), <span class="number">9</span> * Time.deltaTime);</span><br><span class="line">        Uranus.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">25</span>, <span class="number">-1</span>), <span class="number">6</span> * Time.deltaTime);</span><br><span class="line">        Neptune.RotateAround (Sun.position, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">30</span>, <span class="number">1</span>), <span class="number">5</span> * Time.deltaTime);</span><br><span class="line">        EarthShadow.RotateAround (Sun.position, Vector3.up, <span class="number">30</span> * Time.deltaTime);</span><br><span class="line">        <span class="comment">// 自转</span></span><br><span class="line">        Mercury.Rotate (Vector3.down * <span class="number">6</span> * Time.deltaTime);</span><br><span class="line">        Venus.Rotate (Vector3.down * <span class="number">1</span> * Time.deltaTime);</span><br><span class="line">        Earth.Rotate (Vector3.down * <span class="number">300</span> * Time.deltaTime);</span><br><span class="line">        Mars.Rotate (Vector3.up * <span class="number">300</span> * Time.deltaTime);</span><br><span class="line">        Jupiter.Rotate (Vector3.up * <span class="number">600</span> * Time.deltaTime);</span><br><span class="line">        Saturn.Rotate (Vector3.up * <span class="number">400</span> * Time.deltaTime);</span><br><span class="line">        Uranus.Rotate (Vector3.up * <span class="number">500</span> * Time.deltaTime);</span><br><span class="line">        Neptune.Rotate (Vector3.up * <span class="number">500</span> * Time.deltaTime);</span><br><span class="line">        EarthShadow.Rotate (Vector3.down * <span class="number">100</span> * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>最后，将脚本挂在 MainCamera 上，将游戏对象拖入到相应的 Transform 属性中，并将图片素材拖放到行星上。运行效果如下：<br><img src="/2018/03/31/Unity-3D-太阳系/Solar-System1.png" title="Solar System1"><br><img src="/2018/03/31/Unity-3D-太阳系/Solar-System2.png" title="Solar System2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;游戏对象运动的本质是什么&quot;&gt;&lt;a href=&quot;#游戏对象运动的本质是什么&quot; class=&quot;headerlink&quot; title=&quot;游戏对象运动的本质是什么?&quot;&gt;&lt;/a&gt;游戏对象运动的本质是什么?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;游戏对象的运动，是由游戏对象空
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D - 基础概念</title>
    <link href="http://xungerrrr.github.io/2018/03/31/Unity-3D-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>http://xungerrrr.github.io/2018/03/31/Unity-3D-基础概念/</id>
    <published>2018-03-31T04:24:38.000Z</published>
    <updated>2018-04-01T14:05:25.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释-游戏对象（GameObjects）-和-资源（Assets）的区别与联系。"><a href="#解释-游戏对象（GameObjects）-和-资源（Assets）的区别与联系。" class="headerlink" title="解释 游戏对象（GameObjects） 和 资源（Assets）的区别与联系。"></a>解释 游戏对象（GameObjects） 和 资源（Assets）的区别与联系。</h2><ul><li><p>区别</p><ul><li><p>游戏对象（GameObjects）</p><blockquote><p>游戏中的物体就是游戏对象，例如游戏中的角色、道具和环境物体。游戏对象都是由空对象构建而成的。通过向空对象中加入不同的属性（组件），我们可以获得具有不同外观和行为的游戏对象。</p></blockquote></li><li><p>资源（Assets）</p><blockquote><p>游戏开发过程中需要的资源包括材质、纹理、模型、动画、预设、音频、场景等，是能应用在游戏中的素材。</p></blockquote></li></ul></li><li><p>联系</p><blockquote><p>资源能够被导入到游戏中，被游戏对象使用，影响游戏对象的属性。资源还可以被用来创建新的游戏对象。</p></blockquote></li></ul><h2 id="下载几个游戏案例，分别总结资源、对象组织的结构（指资源的目录组织结构与游戏对象树的层次结构）"><a href="#下载几个游戏案例，分别总结资源、对象组织的结构（指资源的目录组织结构与游戏对象树的层次结构）" class="headerlink" title="下载几个游戏案例，分别总结资源、对象组织的结构（指资源的目录组织结构与游戏对象树的层次结构）"></a>下载几个游戏案例，分别总结资源、对象组织的结构（指资源的目录组织结构与游戏对象树的层次结构）</h2><p>Unity 官方教程的资源目录组织和游戏对象树如下：</p><img src="/2018/03/31/Unity-3D-基础概念/file-tree.png" title="file-tree"><p>游戏资源被放到不同的层级中，层次和内容十分清晰。游戏对象间也有明确的层级关系，以便实现游戏中的组合模式。</p><h2 id="编写一个代码，使用-debug-语句来验证-MonoBehaviour-基本行为或事件触发的条件"><a href="#编写一个代码，使用-debug-语句来验证-MonoBehaviour-基本行为或事件触发的条件" class="headerlink" title="编写一个代码，使用 debug 语句来验证 MonoBehaviour 基本行为或事件触发的条件"></a>编写一个代码，使用 debug 语句来验证 <a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.html" target="_blank" rel="noopener">MonoBehaviour</a> 基本行为或事件触发的条件</h2><ul><li>基本行为包括 Awake() Start() Update() FixedUpdate() LateUpdate()</li><li>常用事件包括 OnGUI() OnDisable() OnEnable()</li></ul><p>代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C# Script</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NewBehaviourScript</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否执行过相应函数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">bool</span> isUpdate = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">bool</span> isFixedUpdate = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">bool</span> isLateUpdate = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">bool</span> isOnGUI = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当一个脚本实例被载入时 Awake 被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Awake</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Debug.Log (<span class="string">"Awake"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Start 仅在 Update 函数第一次被调用前调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Debug.Log (<span class="string">"Start"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当 MonoBehaviour 启用时，其 Update 在每一帧被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 确保函数只被执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (!isUpdate) &#123;</span><br><span class="line">      Debug.Log (<span class="string">"Update"</span>);</span><br><span class="line">      isUpdate = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当 MonoBehaviour 启用时，其 FixedUpdate 在每一帧被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 确保函数只被执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (!isFixedUpdate) &#123;</span><br><span class="line">      Debug.Log (<span class="string">"Fixed Update"</span>);</span><br><span class="line">      isFixedUpdate = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当 Behaviour 启用时，其 LateUpdate 在每一帧被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">LateUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 确保函数只被执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (!isLateUpdate) &#123;</span><br><span class="line">      Debug.Log (<span class="string">"Late Update"</span>);</span><br><span class="line">      isLateUpdate = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当对象变为不可用或非激活状态时此函数被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Debug.Log (<span class="string">"On Disable"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当对象变为可用或激活状态时此函数被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Debug.Log (<span class="string">"On Enable"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染和处理 GUI 事件时调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 确保函数只被执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (!isOnGUI) &#123;</span><br><span class="line">      Debug.Log (<span class="string">"On GUI"</span>);</span><br><span class="line">      isOnGUI = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下图：</p><img src="/2018/03/31/Unity-3D-基础概念/console.png" title="console"><p>可以看出，基本行为和事件的发生顺序为：</p><ol><li>Awake()</li><li>OnEnable()</li><li>Start()</li><li>FixedUpdate()</li><li>Update()</li><li>LateUpdate()</li><li>OnGUI()</li><li>OnDisable()</li></ol><p>顺序满足各事件触发的条件。</p><p>FixedUpdate()、LateUpdate()和Update()的区别：</p><ul><li><p>FixedUpdate()</p><blockquote><p>处理 Rigidbody 时，需要用 FixedUpdate 代替 Update。例如: 给刚体加一个作用力时，你必须应用作用力在 FixedUpdate 里的固定帧，而不是 Update 中的帧(两者帧长不同)。</p></blockquote></li><li><p>LateUpdate()</p><blockquote><p>LateUpdate 是在所有 Update 函数调用后被调用。这可用于调整脚本执行顺序。例如: 当物体在 Update 里移动时，跟随物体的相机可以在 LateUpdate 里实现。</p></blockquote></li></ul><h2 id="查找脚本手册，了解-GameObject，Transform，Component-对象"><a href="#查找脚本手册，了解-GameObject，Transform，Component-对象" class="headerlink" title="查找脚本手册，了解 GameObject，Transform，Component 对象"></a>查找脚本手册，了解 <a href="https://docs.unity3d.com/ScriptReference/GameObject.html" target="_blank" rel="noopener">GameObject</a>，Transform，Component 对象</h2><ul><li><p>分别翻译官方对三个对象的描述（Description）</p><ul><li><p>GameObject</p><blockquote><p>GameObjects are the fundamental objects in Unity that represent characters, props and scenery.</p></blockquote><blockquote><p>游戏对象是Unity中基础的对象，它代表了角色、道具和场景。</p></blockquote></li><li><p>Transform</p><blockquote><p>The Transform component determines the Position, Rotation, and Scale of each object in the scene.</p></blockquote><blockquote><p>变换组件决定了场景中每个对象的位置、旋转角度和缩放比例。</p></blockquote></li><li><p>Component</p><blockquote><p>Components are the nuts &amp; bolts of objects and behaviors in a game.</p></blockquote><blockquote><p>组件是游戏中对象和行为的枢纽。</p></blockquote></li></ul></li><li><p>描述下图中 table 对象（实体）的属性、table 的 Transform 的属性、 table 的部件</p><img src="/2018/03/31/Unity-3D-基础概念/ch02-homework.png" title="pic"><ul><li>table 对象（实体）的属性<ul><li>Name: 对象的名字</li><li>Tag: 用于通过 Tag 名称来快速查找对象</li><li>Layer: 可用于仅对某些特定的对象组投射光线、渲染或应用光照</li><li>Static: 准备静态几何结构以用于自动批处理；计算遮挡剔除 (Occlusion Culling)</li></ul></li><li>table 的 Transform 的属性<ul><li>Position: X、Y 和 Z 坐标中变换的位置。(0, 0, 0)</li><li>Rotation: 围绕 X、Y 和 Z 轴的旋转，以度计。(0, 0, 0)</li><li>Scale: 沿 X、Y 和 Z 轴的缩放，“1” 是原始大小。(1, 1, 1)</li></ul></li><li>table 的部件<ul><li>Cube (Mesh Filter): 网格过滤器从资源中拿出网格并将其传递给网格渲染器 (Mesh Renderer) 用于屏幕渲染</li><li>Box Collider: 箱体碰撞体 (Box Collider) 是基本立方体形碰撞基元</li><li>Mesh Renderer: 网格渲染器 (Mesh Renderer) 从网格过滤器 （Mesh Filter) 获得几何结构，并根据物体的变换组件 (Transform) 定义的位置进行渲染</li><li>Material: 材质用于将纹理置于游戏对象 (GameObject) 上</li></ul></li></ul></li><li><p>用 UML 图描述 三者的关系（请使用 UMLet 14.1.1 stand-alone版本出图）</p><img src="/2018/03/31/Unity-3D-基础概念/relation.png" title="relation"></li></ul><h2 id="整理相关学习资料，编写简单代码验证以下技术的实现："><a href="#整理相关学习资料，编写简单代码验证以下技术的实现：" class="headerlink" title="整理相关学习资料，编写简单代码验证以下技术的实现："></a>整理相关学习资料，编写简单代码验证以下技术的实现：</h2><ul><li><p>查找对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过名字查找：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">Find</span>(<span class="params"><span class="keyword">string</span> name</span>)</span>;</span><br><span class="line"><span class="comment">//通过标签查找单个对象：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">FindWithTag</span>(<span class="params"><span class="keyword">string</span> tag</span>)</span>;</span><br><span class="line"><span class="comment">//通过标签查找多个对象：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject[] <span class="title">FindGameObjectsWithTag</span>(<span class="params"><span class="keyword">string</span> tag</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>添加子对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">CreatePrimitive</span>(<span class="params">PrimitiveTypetype</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>遍历对象树</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (Transform child <span class="keyword">in</span> transform) &#123;</span><br><span class="line">  Debug.Log(child.gameObject.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>清除所有子对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (Transform child <span class="keyword">in</span> transform) &#123;  </span><br><span class="line">  Destroy(child.gameObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="资源预设（Prefabs）与-对象克隆-clone"><a href="#资源预设（Prefabs）与-对象克隆-clone" class="headerlink" title="资源预设（Prefabs）与 对象克隆 (clone)"></a>资源预设（Prefabs）与 对象克隆 (clone)</h2><ul><li><p>预设（Prefabs）有什么好处？</p><blockquote><p>预设就是预制好的游戏对象，包含了完整的组件和属性，可看作是游戏对象的模板。利用预制能够批量实例化出具有相同属性的游戏对象。预设与实例之间是联系的，改变预设的属性能够更改所有与之关联的对象的属性。</p></blockquote></li><li><p>预设与对象克隆 (clone or copy or Instantiate of Unity Object) 关系？</p><blockquote><p>不同于预设，对象克隆只是对对象的复制，新对象与克隆本体之间没有关联，不会相互影响。</p></blockquote></li><li><p>制作 table 预制，写一段代码将 table 预制资源实例化成游戏对象</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C# Script</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> UnityEngine;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Instantiate</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> GameObject table;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> columnNum = <span class="number">10</span>; <span class="comment">// 列数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> rowNum = <span class="number">5</span>; <span class="comment">// 行数</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowNum; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columnNum; j++) &#123;</span><br><span class="line">        <span class="comment">// 创建 table 的实例  </span></span><br><span class="line">        Instantiate(table, <span class="keyword">new</span> Vector3(j, i, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图如下：</p>  <img src="/2018/03/31/Unity-3D-基础概念/prefabs.png" title="prefabs"><h2 id="尝试解释组合模式（Composite-Pattern-一种设计模式）。使用-BroadcastMessage-方法向子对象发送消息"><a href="#尝试解释组合模式（Composite-Pattern-一种设计模式）。使用-BroadcastMessage-方法向子对象发送消息" class="headerlink" title="尝试解释组合模式（Composite Pattern / 一种设计模式）。使用 BroadcastMessage() 方法向子对象发送消息"></a>尝试解释组合模式（Composite Pattern / 一种设计模式）。使用 BroadcastMessage() 方法向子对象发送消息</h2><blockquote><p>组合模式将对象组合成树形结构，以表示 “部分整体” 的层次结构。这种模式使得用户能够以一致的方式处理单个对象及对象的组合。</p></blockquote><p>父类对象方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.BroadcastMessage (<span class="string">"CallChildren"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类对象方法：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallChildren</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Debug.Log (<span class="string">"I'm here!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;解释-游戏对象（GameObjects）-和-资源（Assets）的区别与联系。&quot;&gt;&lt;a href=&quot;#解释-游戏对象（GameObjects）-和-资源（Assets）的区别与联系。&quot; class=&quot;headerlink&quot; title=&quot;解释 游戏对象（Game
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity 3D Learning</title>
    <link href="http://xungerrrr.github.io/2018/03/30/Unity-3D-Learning/"/>
    <id>http://xungerrrr.github.io/2018/03/30/Unity-3D-Learning/</id>
    <published>2018-03-30T13:42:17.000Z</published>
    <updated>2018-04-01T14:06:13.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unity-3D编程-学习博客"><a href="#Unity-3D编程-学习博客" class="headerlink" title="Unity 3D编程 学习博客"></a>Unity 3D编程 学习博客</h1><blockquote><p>这是中山大学2018春季学期「3D 游戏编程与设计」的课程博客。以此系列博客记录本人3D编程学习的过程和结果。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="Homework-1"><a href="#Homework-1" class="headerlink" title="Homework 1"></a>Homework 1</h3><ul><li><a href="/2018/03/31/Unity-3D-基础概念/" title="Unity 3D - 基础概念">Unity 3D - 基础概念</a></li><li><a href="https://github.com/Xungerrrr/3D-Game-Programming-and-Design/tree/master/Homework%201/2.%20Tic-Tac-Toe" target="_blank" rel="noopener">小游戏：井字棋</a></li></ul><h3 id="Homework-2"><a href="#Homework-2" class="headerlink" title="Homework 2"></a>Homework 2</h3><ul><li><a href="/2018/03/31/Unity-3D-太阳系/" title="Unity 3D - 太阳系">Unity 3D - 太阳系</a></li><li><a href="/2018/04/01/Unity-3D-牧师与魔鬼/" title="Unity 3D - 牧师与魔鬼">Unity 3D - 牧师与魔鬼</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Unity-3D编程-学习博客&quot;&gt;&lt;a href=&quot;#Unity-3D编程-学习博客&quot; class=&quot;headerlink&quot; title=&quot;Unity 3D编程 学习博客&quot;&gt;&lt;/a&gt;Unity 3D编程 学习博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是中山大
      
    
    </summary>
    
      <category term="Unity" scheme="http://xungerrrr.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://xungerrrr.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xungerrrr.github.io/2018/03/30/hello-world/"/>
    <id>http://xungerrrr.github.io/2018/03/30/hello-world/</id>
    <published>2018-03-30T12:00:00.000Z</published>
    <updated>2018-03-31T07:58:28.067Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="blog" scheme="http://xungerrrr.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
